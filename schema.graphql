type Accommodation implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: RichText

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Accommodation!]!
  headerImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset

  """List of Accommodation versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  image(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: AssetOrderByInput
    skip: Int
    where: AssetWhereInput
  ): [Asset!]!
  otaLink: String
  price(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ProductPriceOrderByInput
    skip: Int
    where: ProductPriceWhereInput
  ): [ProductPrice!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shortDescription: String
  shortLocation: String
  slug: String

  """System stage field"""
  stage: Stage!
  subtitle: String
  title: String

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input AccommodationConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: AccommodationWhereUniqueInput!
}

"""A connection to a list of items."""
type AccommodationConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [AccommodationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input AccommodationCreateInput {
  createdAt: DateTime
  description: RichTextAST
  headerImage: AssetCreateOneInlineInput
  image: AssetCreateManyInlineInput
  otaLink: String
  price: ProductPriceCreateManyInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
  updatedAt: DateTime
}

input AccommodationCreateManyInlineInput {
  """Connect multiple existing Accommodation documents"""
  connect: [AccommodationWhereUniqueInput!]

  """Create and connect multiple existing Accommodation documents"""
  create: [AccommodationCreateInput!]
}

input AccommodationCreateOneInlineInput {
  """Connect one existing Accommodation document"""
  connect: AccommodationWhereUniqueInput

  """Create and connect one Accommodation document"""
  create: AccommodationCreateInput
}

"""An edge in a connection."""
type AccommodationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Accommodation!
}

"""Identifies documents"""
input AccommodationManyWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: AccommodationWhereStageInput
  documentInStages_none: AccommodationWhereStageInput
  documentInStages_some: AccommodationWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  otaLink: String

  """All values containing the given string."""
  otaLink_contains: String

  """All values ending with the given string."""
  otaLink_ends_with: String

  """All values that are contained in given list."""
  otaLink_in: [String]

  """Any other value that exists and is not equal to the given value."""
  otaLink_not: String

  """All values not containing the given string."""
  otaLink_not_contains: String

  """All values not ending with the given string"""
  otaLink_not_ends_with: String

  """All values that are not contained in given list."""
  otaLink_not_in: [String]

  """All values not starting with the given string."""
  otaLink_not_starts_with: String

  """All values starting with the given string."""
  otaLink_starts_with: String
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum AccommodationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  otaLink_ASC
  otaLink_DESC
  publishedAt_ASC
  publishedAt_DESC
  shortDescription_ASC
  shortDescription_DESC
  shortLocation_ASC
  shortLocation_DESC
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AccommodationUpdateInput {
  description: RichTextAST
  headerImage: AssetUpdateOneInlineInput
  image: AssetUpdateManyInlineInput
  otaLink: String
  price: ProductPriceUpdateManyInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
}

input AccommodationUpdateManyInlineInput {
  """Connect multiple existing Accommodation documents"""
  connect: [AccommodationConnectInput!]

  """Create and connect multiple Accommodation documents"""
  create: [AccommodationCreateInput!]

  """Delete multiple Accommodation documents"""
  delete: [AccommodationWhereUniqueInput!]

  """Disconnect multiple Accommodation documents"""
  disconnect: [AccommodationWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Accommodation documents
  """
  set: [AccommodationWhereUniqueInput!]

  """Update multiple Accommodation documents"""
  update: [AccommodationUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Accommodation documents"""
  upsert: [AccommodationUpsertWithNestedWhereUniqueInput!]
}

input AccommodationUpdateManyInput {
  description: RichTextAST
  otaLink: String
  shortDescription: String
  shortLocation: String
  subtitle: String
  title: String
}

input AccommodationUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: AccommodationUpdateManyInput!

  """Document search"""
  where: AccommodationWhereInput!
}

input AccommodationUpdateOneInlineInput {
  """Connect existing Accommodation document"""
  connect: AccommodationWhereUniqueInput

  """Create and connect one Accommodation document"""
  create: AccommodationCreateInput

  """Delete currently connected Accommodation document"""
  delete: Boolean

  """Disconnect currently connected Accommodation document"""
  disconnect: Boolean

  """Update single Accommodation document"""
  update: AccommodationUpdateWithNestedWhereUniqueInput

  """Upsert single Accommodation document"""
  upsert: AccommodationUpsertWithNestedWhereUniqueInput
}

input AccommodationUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: AccommodationUpdateInput!

  """Unique document search"""
  where: AccommodationWhereUniqueInput!
}

input AccommodationUpsertInput {
  """Create document if it didn't exist"""
  create: AccommodationCreateInput!

  """Update document if it exists"""
  update: AccommodationUpdateInput!
}

input AccommodationUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: AccommodationUpsertInput!

  """Unique document search"""
  where: AccommodationWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input AccommodationWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input AccommodationWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: AccommodationWhereStageInput
  documentInStages_none: AccommodationWhereStageInput
  documentInStages_some: AccommodationWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  otaLink: String

  """All values containing the given string."""
  otaLink_contains: String

  """All values ending with the given string."""
  otaLink_ends_with: String

  """All values that are contained in given list."""
  otaLink_in: [String]

  """Any other value that exists and is not equal to the given value."""
  otaLink_not: String

  """All values not containing the given string."""
  otaLink_not_contains: String

  """All values not ending with the given string"""
  otaLink_not_ends_with: String

  """All values that are not contained in given list."""
  otaLink_not_in: [String]

  """All values not starting with the given string."""
  otaLink_not_starts_with: String

  """All values starting with the given string."""
  otaLink_starts_with: String
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input AccommodationWhereStageInput {
  """Logical AND on all given filters."""
  AND: [AccommodationWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: AccommodationWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Accommodation record uniquely"""
input AccommodationWhereUniqueInput {
  id: ID
  slug: String
}

type Aggregate {
  count: Int!
}

"""Asset system model"""
type Asset implements Entity & Node {
  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Asset!]!

  """The file name"""
  fileName: String!

  """The file handle"""
  handle: String!
  headerImageAccommodation(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `headerImageAccommodation` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImageAccommodation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: AccommodationOrderByInput
    skip: Int
    where: AccommodationWhereInput
  ): [Accommodation!]!
  headerImageBlog(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `headerImageBlog` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImageBlog` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: BlogOrderByInput
    skip: Int
    where: BlogWhereInput
  ): [Blog!]!
  headerImageDestination(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `headerImageDestination` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImageDestination` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: DestinationOrderByInput
    skip: Int
    where: DestinationWhereInput
  ): [Destination!]!
  headerImageDocument(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `headerImageDocument` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImageDocument` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: DocumentOrderByInput
    skip: Int
    where: DocumentWhereInput
  ): [Document!]!
  headerImageProduct(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `headerImageProduct` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImageProduct` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ProductOrderByInput
    skip: Int
    where: ProductWhereInput
  ): [Product!]!
  headerImageTour(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `headerImageTour` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImageTour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: TourOrderByInput
    skip: Int
    where: TourWhereInput
  ): [Tour!]!

  """The height of the file"""
  height: Float

  """List of Asset versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  imageAccommodation(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `imageAccommodation` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `imageAccommodation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: AccommodationOrderByInput
    skip: Int
    where: AccommodationWhereInput
  ): [Accommodation!]!
  imageTour(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `imageTour` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `imageTour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: TourOrderByInput
    skip: Int
    where: TourWhereInput
  ): [Tour!]!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false

    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en]
  ): [Asset!]!

  """The mime type of the file"""
  mimeType: String
  productImageDestination(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `productImageDestination` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `productImageDestination` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: DestinationOrderByInput
    skip: Int
    where: DestinationWhereInput
  ): [Destination!]!
  productImageProduct(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `productImageProduct` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `productImageProduct` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ProductOrderByInput
    skip: Int
    where: ProductWhereInput
  ): [Product!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shopLogoShop(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `shopLogoShop` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `shopLogoShop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ShopOrderByInput
    skip: Int
    where: ShopWhereInput
  ): [Shop!]!

  """The file size"""
  size: Float

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!

  """The file width"""
  width: Float
}

input AssetConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: AssetWhereUniqueInput!
}

"""A connection to a list of items."""
type AssetConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [AssetEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input AssetCreateInput {
  createdAt: DateTime
  fileName: String!
  handle: String!
  headerImageAccommodation: AccommodationCreateManyInlineInput
  headerImageBlog: BlogCreateManyInlineInput
  headerImageDestination: DestinationCreateManyInlineInput
  headerImageDocument: DocumentCreateManyInlineInput
  headerImageProduct: ProductCreateManyInlineInput
  headerImageTour: TourCreateManyInlineInput
  height: Float
  imageAccommodation: AccommodationCreateManyInlineInput
  imageTour: TourCreateManyInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: AssetCreateLocalizationsInput
  mimeType: String
  productImageDestination: DestinationCreateManyInlineInput
  productImageProduct: ProductCreateManyInlineInput
  shopLogoShop: ShopCreateManyInlineInput
  size: Float
  updatedAt: DateTime
  width: Float
}

input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  fileName: String!
  handle: String!
  height: Float
  mimeType: String
  size: Float
  updatedAt: DateTime
  width: Float
}

input AssetCreateLocalizationInput {
  """Localization input"""
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [AssetCreateLocalizationInput!]
}

input AssetCreateManyInlineInput {
  """Connect multiple existing Asset documents"""
  connect: [AssetWhereUniqueInput!]

  """Create and connect multiple existing Asset documents"""
  create: [AssetCreateInput!]
}

input AssetCreateOneInlineInput {
  """Connect one existing Asset document"""
  connect: AssetWhereUniqueInput

  """Create and connect one Asset document"""
  create: AssetCreateInput
}

"""An edge in a connection."""
type AssetEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Asset!
}

"""Identifies documents"""
input AssetManyWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: AssetWhereStageInput
  documentInStages_none: AssetWhereStageInput
  documentInStages_some: AssetWhereStageInput
  headerImageAccommodation_every: AccommodationWhereInput
  headerImageAccommodation_none: AccommodationWhereInput
  headerImageAccommodation_some: AccommodationWhereInput
  headerImageBlog_every: BlogWhereInput
  headerImageBlog_none: BlogWhereInput
  headerImageBlog_some: BlogWhereInput
  headerImageDestination_every: DestinationWhereInput
  headerImageDestination_none: DestinationWhereInput
  headerImageDestination_some: DestinationWhereInput
  headerImageDocument_every: DocumentWhereInput
  headerImageDocument_none: DocumentWhereInput
  headerImageDocument_some: DocumentWhereInput
  headerImageProduct_every: ProductWhereInput
  headerImageProduct_none: ProductWhereInput
  headerImageProduct_some: ProductWhereInput
  headerImageTour_every: TourWhereInput
  headerImageTour_none: TourWhereInput
  headerImageTour_some: TourWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  imageAccommodation_every: AccommodationWhereInput
  imageAccommodation_none: AccommodationWhereInput
  imageAccommodation_some: AccommodationWhereInput
  imageTour_every: TourWhereInput
  imageTour_none: TourWhereInput
  imageTour_some: TourWhereInput
  productImageDestination_every: DestinationWhereInput
  productImageDestination_none: DestinationWhereInput
  productImageDestination_some: DestinationWhereInput
  productImageProduct_every: ProductWhereInput
  productImageProduct_none: ProductWhereInput
  productImageProduct_some: ProductWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shopLogoShop_every: ShopWhereInput
  shopLogoShop_none: ShopWhereInput
  shopLogoShop_some: ShopWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum AssetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  fileName_ASC
  fileName_DESC
  handle_ASC
  handle_DESC
  height_ASC
  height_DESC
  id_ASC
  id_DESC
  mimeType_ASC
  mimeType_DESC
  publishedAt_ASC
  publishedAt_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  width_ASC
  width_DESC
}

"""Transformations for Assets"""
input AssetTransformationInput {
  document: DocumentTransformationInput
  image: ImageTransformationInput

  """Pass true if you want to validate the passed transformation parameters"""
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  fileName: String
  handle: String
  headerImageAccommodation: AccommodationUpdateManyInlineInput
  headerImageBlog: BlogUpdateManyInlineInput
  headerImageDestination: DestinationUpdateManyInlineInput
  headerImageDocument: DocumentUpdateManyInlineInput
  headerImageProduct: ProductUpdateManyInlineInput
  headerImageTour: TourUpdateManyInlineInput
  height: Float
  imageAccommodation: AccommodationUpdateManyInlineInput
  imageTour: TourUpdateManyInlineInput

  """Manage document localizations"""
  localizations: AssetUpdateLocalizationsInput
  mimeType: String
  productImageDestination: DestinationUpdateManyInlineInput
  productImageProduct: ProductUpdateManyInlineInput
  shopLogoShop: ShopUpdateManyInlineInput
  size: Float
  width: Float
}

input AssetUpdateLocalizationDataInput {
  fileName: String
  handle: String
  height: Float
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateLocalizationsInput {
  """Localizations to create"""
  create: [AssetCreateLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]

  """Localizations to update"""
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]
}

input AssetUpdateManyInlineInput {
  """Connect multiple existing Asset documents"""
  connect: [AssetConnectInput!]

  """Create and connect multiple Asset documents"""
  create: [AssetCreateInput!]

  """Delete multiple Asset documents"""
  delete: [AssetWhereUniqueInput!]

  """Disconnect multiple Asset documents"""
  disconnect: [AssetWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Asset documents
  """
  set: [AssetWhereUniqueInput!]

  """Update multiple Asset documents"""
  update: [AssetUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Asset documents"""
  upsert: [AssetUpsertWithNestedWhereUniqueInput!]
}

input AssetUpdateManyInput {
  fileName: String
  height: Float

  """Optional updates to localizations"""
  localizations: AssetUpdateManyLocalizationsInput
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateManyLocalizationDataInput {
  fileName: String
  height: Float
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateManyLocalizationInput {
  data: AssetUpdateManyLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: AssetUpdateManyInput!

  """Document search"""
  where: AssetWhereInput!
}

input AssetUpdateOneInlineInput {
  """Connect existing Asset document"""
  connect: AssetWhereUniqueInput

  """Create and connect one Asset document"""
  create: AssetCreateInput

  """Delete currently connected Asset document"""
  delete: Boolean

  """Disconnect currently connected Asset document"""
  disconnect: Boolean

  """Update single Asset document"""
  update: AssetUpdateWithNestedWhereUniqueInput

  """Upsert single Asset document"""
  upsert: AssetUpsertWithNestedWhereUniqueInput
}

input AssetUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: AssetUpdateInput!

  """Unique document search"""
  where: AssetWhereUniqueInput!
}

input AssetUpsertInput {
  """Create document if it didn't exist"""
  create: AssetCreateInput!

  """Update document if it exists"""
  update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
  update: AssetUpdateLocalizationDataInput!
}

input AssetUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: AssetUpsertInput!

  """Unique document search"""
  where: AssetWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input AssetWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input AssetWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: AssetWhereStageInput
  documentInStages_none: AssetWhereStageInput
  documentInStages_some: AssetWhereStageInput
  fileName: String

  """All values containing the given string."""
  fileName_contains: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values that are contained in given list."""
  fileName_in: [String]

  """Any other value that exists and is not equal to the given value."""
  fileName_not: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values not ending with the given string"""
  fileName_not_ends_with: String

  """All values that are not contained in given list."""
  fileName_not_in: [String]

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values starting with the given string."""
  fileName_starts_with: String
  handle: String

  """All values containing the given string."""
  handle_contains: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values that are contained in given list."""
  handle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  handle_not: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values not ending with the given string"""
  handle_not_ends_with: String

  """All values that are not contained in given list."""
  handle_not_in: [String]

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values starting with the given string."""
  handle_starts_with: String
  headerImageAccommodation_every: AccommodationWhereInput
  headerImageAccommodation_none: AccommodationWhereInput
  headerImageAccommodation_some: AccommodationWhereInput
  headerImageBlog_every: BlogWhereInput
  headerImageBlog_none: BlogWhereInput
  headerImageBlog_some: BlogWhereInput
  headerImageDestination_every: DestinationWhereInput
  headerImageDestination_none: DestinationWhereInput
  headerImageDestination_some: DestinationWhereInput
  headerImageDocument_every: DocumentWhereInput
  headerImageDocument_none: DocumentWhereInput
  headerImageDocument_some: DocumentWhereInput
  headerImageProduct_every: ProductWhereInput
  headerImageProduct_none: ProductWhereInput
  headerImageProduct_some: ProductWhereInput
  headerImageTour_every: TourWhereInput
  headerImageTour_none: TourWhereInput
  headerImageTour_some: TourWhereInput
  height: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float

  """All values that are contained in given list."""
  height_in: [Float]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """Any other value that exists and is not equal to the given value."""
  height_not: Float

  """All values that are not contained in given list."""
  height_not_in: [Float]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  imageAccommodation_every: AccommodationWhereInput
  imageAccommodation_none: AccommodationWhereInput
  imageAccommodation_some: AccommodationWhereInput
  imageTour_every: TourWhereInput
  imageTour_none: TourWhereInput
  imageTour_some: TourWhereInput
  mimeType: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values that are contained in given list."""
  mimeType_in: [String]

  """Any other value that exists and is not equal to the given value."""
  mimeType_not: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values not ending with the given string"""
  mimeType_not_ends_with: String

  """All values that are not contained in given list."""
  mimeType_not_in: [String]

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values starting with the given string."""
  mimeType_starts_with: String
  productImageDestination_every: DestinationWhereInput
  productImageDestination_none: DestinationWhereInput
  productImageDestination_some: DestinationWhereInput
  productImageProduct_every: ProductWhereInput
  productImageProduct_none: ProductWhereInput
  productImageProduct_some: ProductWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shopLogoShop_every: ShopWhereInput
  shopLogoShop_none: ShopWhereInput
  shopLogoShop_some: ShopWhereInput
  size: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float

  """All values that are contained in given list."""
  size_in: [Float]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """Any other value that exists and is not equal to the given value."""
  size_not: Float

  """All values that are not contained in given list."""
  size_not_in: [Float]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
  width: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float

  """All values that are contained in given list."""
  width_in: [Float]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """Any other value that exists and is not equal to the given value."""
  width_not: Float

  """All values that are not contained in given list."""
  width_not_in: [Float]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input AssetWhereStageInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: AssetWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Asset record uniquely"""
input AssetWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Blog implements Entity & Node {
  category: BlogCategory
  content: RichText

  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Blog!]!
  headerImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset

  """List of Blog versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shortDescription: String
  slug: String

  """System stage field"""
  stage: Stage!
  subtitle: String
  title: String

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

enum BlogCategory {
  event
  guide
  product
  travel
}

input BlogConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: BlogWhereUniqueInput!
}

"""A connection to a list of items."""
type BlogConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [BlogEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input BlogCreateInput {
  category: BlogCategory
  content: RichTextAST
  createdAt: DateTime
  headerImage: AssetCreateOneInlineInput
  shortDescription: String
  slug: String
  subtitle: String
  title: String
  updatedAt: DateTime
}

input BlogCreateManyInlineInput {
  """Connect multiple existing Blog documents"""
  connect: [BlogWhereUniqueInput!]

  """Create and connect multiple existing Blog documents"""
  create: [BlogCreateInput!]
}

input BlogCreateOneInlineInput {
  """Connect one existing Blog document"""
  connect: BlogWhereUniqueInput

  """Create and connect one Blog document"""
  create: BlogCreateInput
}

"""An edge in a connection."""
type BlogEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Blog!
}

"""Identifies documents"""
input BlogManyWhereInput {
  """Logical AND on all given filters."""
  AND: [BlogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlogWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  category: BlogCategory

  """All values that are contained in given list."""
  category_in: [BlogCategory]

  """Any other value that exists and is not equal to the given value."""
  category_not: BlogCategory

  """All values that are not contained in given list."""
  category_not_in: [BlogCategory]
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: BlogWhereStageInput
  documentInStages_none: BlogWhereStageInput
  documentInStages_some: BlogWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum BlogOrderByInput {
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  publishedAt_ASC
  publishedAt_DESC
  shortDescription_ASC
  shortDescription_DESC
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input BlogUpdateInput {
  category: BlogCategory
  content: RichTextAST
  headerImage: AssetUpdateOneInlineInput
  shortDescription: String
  slug: String
  subtitle: String
  title: String
}

input BlogUpdateManyInlineInput {
  """Connect multiple existing Blog documents"""
  connect: [BlogConnectInput!]

  """Create and connect multiple Blog documents"""
  create: [BlogCreateInput!]

  """Delete multiple Blog documents"""
  delete: [BlogWhereUniqueInput!]

  """Disconnect multiple Blog documents"""
  disconnect: [BlogWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Blog documents
  """
  set: [BlogWhereUniqueInput!]

  """Update multiple Blog documents"""
  update: [BlogUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Blog documents"""
  upsert: [BlogUpsertWithNestedWhereUniqueInput!]
}

input BlogUpdateManyInput {
  category: BlogCategory
  content: RichTextAST
  shortDescription: String
  subtitle: String
  title: String
}

input BlogUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: BlogUpdateManyInput!

  """Document search"""
  where: BlogWhereInput!
}

input BlogUpdateOneInlineInput {
  """Connect existing Blog document"""
  connect: BlogWhereUniqueInput

  """Create and connect one Blog document"""
  create: BlogCreateInput

  """Delete currently connected Blog document"""
  delete: Boolean

  """Disconnect currently connected Blog document"""
  disconnect: Boolean

  """Update single Blog document"""
  update: BlogUpdateWithNestedWhereUniqueInput

  """Upsert single Blog document"""
  upsert: BlogUpsertWithNestedWhereUniqueInput
}

input BlogUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: BlogUpdateInput!

  """Unique document search"""
  where: BlogWhereUniqueInput!
}

input BlogUpsertInput {
  """Create document if it didn't exist"""
  create: BlogCreateInput!

  """Update document if it exists"""
  update: BlogUpdateInput!
}

input BlogUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: BlogUpsertInput!

  """Unique document search"""
  where: BlogWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input BlogWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input BlogWhereInput {
  """Logical AND on all given filters."""
  AND: [BlogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlogWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  category: BlogCategory

  """All values that are contained in given list."""
  category_in: [BlogCategory]

  """Any other value that exists and is not equal to the given value."""
  category_not: BlogCategory

  """All values that are not contained in given list."""
  category_not_in: [BlogCategory]
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: BlogWhereStageInput
  documentInStages_none: BlogWhereStageInput
  documentInStages_some: BlogWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input BlogWhereStageInput {
  """Logical AND on all given filters."""
  AND: [BlogWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [BlogWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: BlogWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Blog record uniquely"""
input BlogWhereUniqueInput {
  id: ID
  slug: String
}

"""
Representing a color value comprising of HEX, RGBA and css color values
"""
type Color {
  css: String!
  hex: Hex!
  rgba: RGBA!
}

"""
Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used.
"""
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}

input ConnectPositionInput {
  """Connect document after specified document"""
  after: ID

  """Connect document before specified document"""
  before: ID

  """Connect document at last position"""
  end: Boolean

  """Connect document at first position"""
  start: Boolean
}

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

type Destination implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: RichText

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Destination!]!
  headerImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset

  """List of Destination versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  image(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: AssetOrderByInput
    skip: Int
    where: AssetWhereInput
  ): [Asset!]!
  isFeatured: Boolean
  isVisible: Boolean
  location: Location
  price(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ProductPriceOrderByInput
    skip: Int
    where: ProductPriceWhereInput
  ): [ProductPrice!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shop(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `shop` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `shop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Shop
  shortDescription: String
  shortLocation: String
  slug: String

  """System stage field"""
  stage: Stage!
  subtitle: String
  title: String
  tour(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `tour` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `tour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Tour

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  youtubeLink: [String!]!
}

input DestinationConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: DestinationWhereUniqueInput!
}

"""A connection to a list of items."""
type DestinationConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [DestinationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input DestinationCreateInput {
  createdAt: DateTime
  description: RichTextAST
  headerImage: AssetCreateOneInlineInput
  image: AssetCreateManyInlineInput
  isFeatured: Boolean
  isVisible: Boolean
  location: LocationInput
  price: ProductPriceCreateManyInlineInput
  shop: ShopCreateOneInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
  tour: TourCreateOneInlineInput
  updatedAt: DateTime
  youtubeLink: [String!]
}

input DestinationCreateManyInlineInput {
  """Connect multiple existing Destination documents"""
  connect: [DestinationWhereUniqueInput!]

  """Create and connect multiple existing Destination documents"""
  create: [DestinationCreateInput!]
}

input DestinationCreateOneInlineInput {
  """Connect one existing Destination document"""
  connect: DestinationWhereUniqueInput

  """Create and connect one Destination document"""
  create: DestinationCreateInput
}

"""An edge in a connection."""
type DestinationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Destination!
}

"""Identifies documents"""
input DestinationManyWhereInput {
  """Logical AND on all given filters."""
  AND: [DestinationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DestinationWhereInput!]

  """Logical OR on all given filters."""
  OR: [DestinationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: DestinationWhereStageInput
  documentInStages_none: DestinationWhereStageInput
  documentInStages_some: DestinationWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  isFeatured: Boolean

  """Any other value that exists and is not equal to the given value."""
  isFeatured_not: Boolean
  isVisible: Boolean

  """Any other value that exists and is not equal to the given value."""
  isVisible_not: Boolean
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shop: ShopWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  tour: TourWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  youtubeLink: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  youtubeLink_contains_all: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  youtubeLink_contains_none: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  youtubeLink_contains_some: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  youtubeLink_not: [String!]
}

enum DestinationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isFeatured_ASC
  isFeatured_DESC
  isVisible_ASC
  isVisible_DESC
  publishedAt_ASC
  publishedAt_DESC
  shortDescription_ASC
  shortDescription_DESC
  shortLocation_ASC
  shortLocation_DESC
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  youtubeLink_ASC
  youtubeLink_DESC
}

input DestinationUpdateInput {
  description: RichTextAST
  headerImage: AssetUpdateOneInlineInput
  image: AssetUpdateManyInlineInput
  isFeatured: Boolean
  isVisible: Boolean
  location: LocationInput
  price: ProductPriceUpdateManyInlineInput
  shop: ShopUpdateOneInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
  tour: TourUpdateOneInlineInput
  youtubeLink: [String!]
}

input DestinationUpdateManyInlineInput {
  """Connect multiple existing Destination documents"""
  connect: [DestinationConnectInput!]

  """Create and connect multiple Destination documents"""
  create: [DestinationCreateInput!]

  """Delete multiple Destination documents"""
  delete: [DestinationWhereUniqueInput!]

  """Disconnect multiple Destination documents"""
  disconnect: [DestinationWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Destination documents
  """
  set: [DestinationWhereUniqueInput!]

  """Update multiple Destination documents"""
  update: [DestinationUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Destination documents"""
  upsert: [DestinationUpsertWithNestedWhereUniqueInput!]
}

input DestinationUpdateManyInput {
  description: RichTextAST
  isFeatured: Boolean
  isVisible: Boolean
  location: LocationInput
  shortDescription: String
  shortLocation: String
  subtitle: String
  title: String
  youtubeLink: [String!]
}

input DestinationUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: DestinationUpdateManyInput!

  """Document search"""
  where: DestinationWhereInput!
}

input DestinationUpdateOneInlineInput {
  """Connect existing Destination document"""
  connect: DestinationWhereUniqueInput

  """Create and connect one Destination document"""
  create: DestinationCreateInput

  """Delete currently connected Destination document"""
  delete: Boolean

  """Disconnect currently connected Destination document"""
  disconnect: Boolean

  """Update single Destination document"""
  update: DestinationUpdateWithNestedWhereUniqueInput

  """Upsert single Destination document"""
  upsert: DestinationUpsertWithNestedWhereUniqueInput
}

input DestinationUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: DestinationUpdateInput!

  """Unique document search"""
  where: DestinationWhereUniqueInput!
}

input DestinationUpsertInput {
  """Create document if it didn't exist"""
  create: DestinationCreateInput!

  """Update document if it exists"""
  update: DestinationUpdateInput!
}

input DestinationUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: DestinationUpsertInput!

  """Unique document search"""
  where: DestinationWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input DestinationWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input DestinationWhereInput {
  """Logical AND on all given filters."""
  AND: [DestinationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DestinationWhereInput!]

  """Logical OR on all given filters."""
  OR: [DestinationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: DestinationWhereStageInput
  documentInStages_none: DestinationWhereStageInput
  documentInStages_some: DestinationWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  isFeatured: Boolean

  """Any other value that exists and is not equal to the given value."""
  isFeatured_not: Boolean
  isVisible: Boolean

  """Any other value that exists and is not equal to the given value."""
  isVisible_not: Boolean
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shop: ShopWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  tour: TourWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  youtubeLink: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  youtubeLink_contains_all: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  youtubeLink_contains_none: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  youtubeLink_contains_some: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  youtubeLink_not: [String!]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input DestinationWhereStageInput {
  """Logical AND on all given filters."""
  AND: [DestinationWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DestinationWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [DestinationWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: DestinationWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Destination record uniquely"""
input DestinationWhereUniqueInput {
  id: ID
  slug: String
}

enum Destinationcategory {
  beach
  hill
  religious
}

type Document implements Entity & Node {
  content: RichText

  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Document!]!
  headerImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset

  """List of Document versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  slug: String

  """System stage field"""
  stage: Stage!
  subtitle: String
  title: String

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input DocumentConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: DocumentWhereUniqueInput!
}

"""A connection to a list of items."""
type DocumentConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [DocumentEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input DocumentCreateInput {
  content: RichTextAST
  createdAt: DateTime
  headerImage: AssetCreateOneInlineInput
  slug: String
  subtitle: String
  title: String
  updatedAt: DateTime
}

input DocumentCreateManyInlineInput {
  """Connect multiple existing Document documents"""
  connect: [DocumentWhereUniqueInput!]

  """Create and connect multiple existing Document documents"""
  create: [DocumentCreateInput!]
}

input DocumentCreateOneInlineInput {
  """Connect one existing Document document"""
  connect: DocumentWhereUniqueInput

  """Create and connect one Document document"""
  create: DocumentCreateInput
}

"""An edge in a connection."""
type DocumentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Document!
}

enum DocumentFileTypes {
  doc
  docx
  html
  jpg
  odp
  ods
  odt
  pdf
  png
  ppt
  pptx
  svg
  txt
  webp
  xls
  xlsx
}

"""Identifies documents"""
input DocumentManyWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: DocumentWhereStageInput
  documentInStages_none: DocumentWhereStageInput
  documentInStages_some: DocumentWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum DocumentOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  publishedAt_ASC
  publishedAt_DESC
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

input DocumentUpdateInput {
  content: RichTextAST
  headerImage: AssetUpdateOneInlineInput
  slug: String
  subtitle: String
  title: String
}

input DocumentUpdateManyInlineInput {
  """Connect multiple existing Document documents"""
  connect: [DocumentConnectInput!]

  """Create and connect multiple Document documents"""
  create: [DocumentCreateInput!]

  """Delete multiple Document documents"""
  delete: [DocumentWhereUniqueInput!]

  """Disconnect multiple Document documents"""
  disconnect: [DocumentWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Document documents
  """
  set: [DocumentWhereUniqueInput!]

  """Update multiple Document documents"""
  update: [DocumentUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Document documents"""
  upsert: [DocumentUpsertWithNestedWhereUniqueInput!]
}

input DocumentUpdateManyInput {
  content: RichTextAST
  subtitle: String
  title: String
}

input DocumentUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: DocumentUpdateManyInput!

  """Document search"""
  where: DocumentWhereInput!
}

input DocumentUpdateOneInlineInput {
  """Connect existing Document document"""
  connect: DocumentWhereUniqueInput

  """Create and connect one Document document"""
  create: DocumentCreateInput

  """Delete currently connected Document document"""
  delete: Boolean

  """Disconnect currently connected Document document"""
  disconnect: Boolean

  """Update single Document document"""
  update: DocumentUpdateWithNestedWhereUniqueInput

  """Upsert single Document document"""
  upsert: DocumentUpsertWithNestedWhereUniqueInput
}

input DocumentUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: DocumentUpdateInput!

  """Unique document search"""
  where: DocumentWhereUniqueInput!
}

input DocumentUpsertInput {
  """Create document if it didn't exist"""
  create: DocumentCreateInput!

  """Update document if it exists"""
  update: DocumentUpdateInput!
}

input DocumentUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: DocumentUpsertInput!

  """Unique document search"""
  where: DocumentWhereUniqueInput!
}

type DocumentVersion {
  createdAt: DateTime!
  data: Json
  id: ID!
  revision: Int!
  stage: Stage!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input DocumentWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input DocumentWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: DocumentWhereStageInput
  documentInStages_none: DocumentWhereStageInput
  documentInStages_some: DocumentWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input DocumentWhereStageInput {
  """Logical AND on all given filters."""
  AND: [DocumentWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [DocumentWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: DocumentWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Document record uniquely"""
input DocumentWhereUniqueInput {
  id: ID
  slug: String
}

type Email implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Email!]!
  email: String

  """List of Email versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input EmailConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: EmailWhereUniqueInput!
}

"""A connection to a list of items."""
type EmailConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [EmailEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input EmailCreateInput {
  createdAt: DateTime
  email: String
  updatedAt: DateTime
}

input EmailCreateManyInlineInput {
  """Connect multiple existing Email documents"""
  connect: [EmailWhereUniqueInput!]

  """Create and connect multiple existing Email documents"""
  create: [EmailCreateInput!]
}

input EmailCreateOneInlineInput {
  """Connect one existing Email document"""
  connect: EmailWhereUniqueInput

  """Create and connect one Email document"""
  create: EmailCreateInput
}

"""An edge in a connection."""
type EmailEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Email!
}

"""Identifies documents"""
input EmailManyWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: EmailWhereStageInput
  documentInStages_none: EmailWhereStageInput
  documentInStages_some: EmailWhereStageInput
  email: String

  """All values containing the given string."""
  email_contains: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values that are contained in given list."""
  email_in: [String]

  """Any other value that exists and is not equal to the given value."""
  email_not: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values not ending with the given string"""
  email_not_ends_with: String

  """All values that are not contained in given list."""
  email_not_in: [String]

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values starting with the given string."""
  email_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum EmailOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EmailUpdateInput {
  email: String
}

input EmailUpdateManyInlineInput {
  """Connect multiple existing Email documents"""
  connect: [EmailConnectInput!]

  """Create and connect multiple Email documents"""
  create: [EmailCreateInput!]

  """Delete multiple Email documents"""
  delete: [EmailWhereUniqueInput!]

  """Disconnect multiple Email documents"""
  disconnect: [EmailWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Email documents
  """
  set: [EmailWhereUniqueInput!]

  """Update multiple Email documents"""
  update: [EmailUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Email documents"""
  upsert: [EmailUpsertWithNestedWhereUniqueInput!]
}

input EmailUpdateManyInput {
  email: String
}

input EmailUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: EmailUpdateManyInput!

  """Document search"""
  where: EmailWhereInput!
}

input EmailUpdateOneInlineInput {
  """Connect existing Email document"""
  connect: EmailWhereUniqueInput

  """Create and connect one Email document"""
  create: EmailCreateInput

  """Delete currently connected Email document"""
  delete: Boolean

  """Disconnect currently connected Email document"""
  disconnect: Boolean

  """Update single Email document"""
  update: EmailUpdateWithNestedWhereUniqueInput

  """Upsert single Email document"""
  upsert: EmailUpsertWithNestedWhereUniqueInput
}

input EmailUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: EmailUpdateInput!

  """Unique document search"""
  where: EmailWhereUniqueInput!
}

input EmailUpsertInput {
  """Create document if it didn't exist"""
  create: EmailCreateInput!

  """Update document if it exists"""
  update: EmailUpdateInput!
}

input EmailUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: EmailUpsertInput!

  """Unique document search"""
  where: EmailWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input EmailWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input EmailWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: EmailWhereStageInput
  documentInStages_none: EmailWhereStageInput
  documentInStages_some: EmailWhereStageInput
  email: String

  """All values containing the given string."""
  email_contains: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values that are contained in given list."""
  email_in: [String]

  """Any other value that exists and is not equal to the given value."""
  email_not: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values not ending with the given string"""
  email_not_ends_with: String

  """All values that are not contained in given list."""
  email_not_in: [String]

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values starting with the given string."""
  email_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input EmailWhereStageInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: EmailWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Email record uniquely"""
input EmailWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Entity {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

"""
This enumeration holds all typenames that implement the Entity interface. Components and models implement the Entity interface.
"""
enum EntityTypeName {
  Accommodation

  """Asset system model"""
  Asset
  Blog
  Destination
  Document
  Email
  Product
  ProductPrice

  """Scheduled Operation system model"""
  ScheduledOperation

  """Scheduled Release system model"""
  ScheduledRelease
  Shop
  Tour

  """User system model"""
  User
}

"""Allows to specify input to query models and components directly"""
input EntityWhereInput {
  """The ID of an object"""
  id: ID!
  locale: Locale
  stage: Stage!

  """The Type name of an object"""
  typename: EntityTypeName!
}

scalar Hex

enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.
  """
  max

  """
  Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.
  """
  scale
}

input ImageResizeInput {
  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

"""Raw JSON value"""
scalar Json

"""Locale system enumeration"""
enum Locale {
  """System locale"""
  en
}

"""Representing a geolocation point with latitude and longitude"""
type Location {
  distance(from: LocationInput!): Float!
  latitude: Float!
  longitude: Float!
}

"""Input for a geolocation point with latitude and longitude"""
input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  """Create one accommodation"""
  createAccommodation(data: AccommodationCreateInput!): Accommodation

  """Create one asset"""
  createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")

  """Create one blog"""
  createBlog(data: BlogCreateInput!): Blog

  """Create one destination"""
  createDestination(data: DestinationCreateInput!): Destination

  """Create one document"""
  createDocument(data: DocumentCreateInput!): Document

  """Create one email"""
  createEmail(data: EmailCreateInput!): Email

  """Create one product"""
  createProduct(data: ProductCreateInput!): Product

  """Create one scheduledRelease"""
  createScheduledRelease(data: ScheduledReleaseCreateInput!): ScheduledRelease

  """Create one shop"""
  createShop(data: ShopCreateInput!): Shop

  """Create one tour"""
  createTour(data: TourCreateInput!): Tour

  """
  Delete one accommodation from _all_ existing stages. Returns deleted document.
  """
  deleteAccommodation(
    """Document to delete"""
    where: AccommodationWhereUniqueInput!
  ): Accommodation

  """Delete one asset from _all_ existing stages. Returns deleted document."""
  deleteAsset(
    """Document to delete"""
    where: AssetWhereUniqueInput!
  ): Asset

  """Delete one blog from _all_ existing stages. Returns deleted document."""
  deleteBlog(
    """Document to delete"""
    where: BlogWhereUniqueInput!
  ): Blog

  """
  Delete one destination from _all_ existing stages. Returns deleted document.
  """
  deleteDestination(
    """Document to delete"""
    where: DestinationWhereUniqueInput!
  ): Destination

  """
  Delete one document from _all_ existing stages. Returns deleted document.
  """
  deleteDocument(
    """Document to delete"""
    where: DocumentWhereUniqueInput!
  ): Document

  """Delete one email from _all_ existing stages. Returns deleted document."""
  deleteEmail(
    """Document to delete"""
    where: EmailWhereUniqueInput!
  ): Email

  """Delete many Accommodation documents"""
  deleteManyAccommodations(
    """Documents to delete"""
    where: AccommodationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAccommodationsConnection)")

  """Delete many Accommodation documents, return deleted documents"""
  deleteManyAccommodationsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: AccommodationManyWhereInput
  ): AccommodationConnection!

  """Delete many Asset documents"""
  deleteManyAssets(
    """Documents to delete"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")

  """Delete many Asset documents, return deleted documents"""
  deleteManyAssetsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: AssetManyWhereInput
  ): AssetConnection!

  """Delete many Blog documents"""
  deleteManyBlogs(
    """Documents to delete"""
    where: BlogManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyBlogsConnection)")

  """Delete many Blog documents, return deleted documents"""
  deleteManyBlogsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: BlogManyWhereInput
  ): BlogConnection!

  """Delete many Destination documents"""
  deleteManyDestinations(
    """Documents to delete"""
    where: DestinationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyDestinationsConnection)")

  """Delete many Destination documents, return deleted documents"""
  deleteManyDestinationsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: DestinationManyWhereInput
  ): DestinationConnection!

  """Delete many Document documents"""
  deleteManyDocuments(
    """Documents to delete"""
    where: DocumentManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyDocumentsConnection)")

  """Delete many Document documents, return deleted documents"""
  deleteManyDocumentsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: DocumentManyWhereInput
  ): DocumentConnection!

  """Delete many Email documents"""
  deleteManyEmails(
    """Documents to delete"""
    where: EmailManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyEmailsConnection)")

  """Delete many Email documents, return deleted documents"""
  deleteManyEmailsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: EmailManyWhereInput
  ): EmailConnection!

  """Delete many Product documents"""
  deleteManyProducts(
    """Documents to delete"""
    where: ProductManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyProductsConnection)")

  """Delete many Product documents, return deleted documents"""
  deleteManyProductsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: ProductManyWhereInput
  ): ProductConnection!

  """Delete many Shop documents"""
  deleteManyShops(
    """Documents to delete"""
    where: ShopManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyShopsConnection)")

  """Delete many Shop documents, return deleted documents"""
  deleteManyShopsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: ShopManyWhereInput
  ): ShopConnection!

  """Delete many Tour documents"""
  deleteManyTours(
    """Documents to delete"""
    where: TourManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyToursConnection)")

  """Delete many Tour documents, return deleted documents"""
  deleteManyToursConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: TourManyWhereInput
  ): TourConnection!

  """
  Delete one product from _all_ existing stages. Returns deleted document.
  """
  deleteProduct(
    """Document to delete"""
    where: ProductWhereUniqueInput!
  ): Product

  """Delete and return scheduled operation"""
  deleteScheduledOperation(
    """Document to delete"""
    where: ScheduledOperationWhereUniqueInput!
  ): ScheduledOperation

  """
  Delete one scheduledRelease from _all_ existing stages. Returns deleted document.
  """
  deleteScheduledRelease(
    """Document to delete"""
    where: ScheduledReleaseWhereUniqueInput!
  ): ScheduledRelease

  """Delete one shop from _all_ existing stages. Returns deleted document."""
  deleteShop(
    """Document to delete"""
    where: ShopWhereUniqueInput!
  ): Shop

  """Delete one tour from _all_ existing stages. Returns deleted document."""
  deleteTour(
    """Document to delete"""
    where: TourWhereUniqueInput!
  ): Tour

  """Publish one accommodation"""
  publishAccommodation(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: AccommodationWhereUniqueInput!
  ): Accommodation

  """Publish one asset"""
  publishAsset(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Asset

  """Publish one blog"""
  publishBlog(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: BlogWhereUniqueInput!
  ): Blog

  """Publish one destination"""
  publishDestination(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: DestinationWhereUniqueInput!
  ): Destination

  """Publish one document"""
  publishDocument(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: DocumentWhereUniqueInput!
  ): Document

  """Publish one email"""
  publishEmail(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: EmailWhereUniqueInput!
  ): Email

  """Publish many Accommodation documents"""
  publishManyAccommodations(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: AccommodationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAccommodationsConnection)")

  """Publish many Accommodation documents"""
  publishManyAccommodationsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: AccommodationManyWhereInput
  ): AccommodationConnection!

  """Publish many Asset documents"""
  publishManyAssets(
    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")

  """Publish many Asset documents"""
  publishManyAssetsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): AssetConnection!

  """Publish many Blog documents"""
  publishManyBlogs(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: BlogManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyBlogsConnection)")

  """Publish many Blog documents"""
  publishManyBlogsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: BlogManyWhereInput
  ): BlogConnection!

  """Publish many Destination documents"""
  publishManyDestinations(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: DestinationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyDestinationsConnection)")

  """Publish many Destination documents"""
  publishManyDestinationsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: DestinationManyWhereInput
  ): DestinationConnection!

  """Publish many Document documents"""
  publishManyDocuments(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: DocumentManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyDocumentsConnection)")

  """Publish many Document documents"""
  publishManyDocumentsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: DocumentManyWhereInput
  ): DocumentConnection!

  """Publish many Email documents"""
  publishManyEmails(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: EmailManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyEmailsConnection)")

  """Publish many Email documents"""
  publishManyEmailsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: EmailManyWhereInput
  ): EmailConnection!

  """Publish many Product documents"""
  publishManyProducts(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: ProductManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyProductsConnection)")

  """Publish many Product documents"""
  publishManyProductsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: ProductManyWhereInput
  ): ProductConnection!

  """Publish many Shop documents"""
  publishManyShops(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: ShopManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyShopsConnection)")

  """Publish many Shop documents"""
  publishManyShopsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: ShopManyWhereInput
  ): ShopConnection!

  """Publish many Tour documents"""
  publishManyTours(
    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: TourManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyToursConnection)")

  """Publish many Tour documents"""
  publishManyToursConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: TourManyWhereInput
  ): TourConnection!

  """Publish one product"""
  publishProduct(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: ProductWhereUniqueInput!
  ): Product

  """Publish one shop"""
  publishShop(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: ShopWhereUniqueInput!
  ): Shop

  """Publish one tour"""
  publishTour(
    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: TourWhereUniqueInput!
  ): Tour

  """Schedule to publish one accommodation"""
  schedulePublishAccommodation(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: AccommodationWhereUniqueInput!
  ): Accommodation

  """Schedule to publish one asset"""
  schedulePublishAsset(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Asset

  """Schedule to publish one blog"""
  schedulePublishBlog(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: BlogWhereUniqueInput!
  ): Blog

  """Schedule to publish one destination"""
  schedulePublishDestination(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: DestinationWhereUniqueInput!
  ): Destination

  """Schedule to publish one document"""
  schedulePublishDocument(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: DocumentWhereUniqueInput!
  ): Document

  """Schedule to publish one email"""
  schedulePublishEmail(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: EmailWhereUniqueInput!
  ): Email

  """Schedule to publish one product"""
  schedulePublishProduct(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: ProductWhereUniqueInput!
  ): Product

  """Schedule to publish one shop"""
  schedulePublishShop(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: ShopWhereUniqueInput!
  ): Shop

  """Schedule to publish one tour"""
  schedulePublishTour(
    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: TourWhereUniqueInput!
  ): Tour

  """
  Unpublish one accommodation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishAccommodation(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: AccommodationWhereUniqueInput!
  ): Accommodation

  """
  Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishAsset(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: AssetWhereUniqueInput!
  ): Asset

  """
  Unpublish one blog from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishBlog(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: BlogWhereUniqueInput!
  ): Blog

  """
  Unpublish one destination from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishDestination(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: DestinationWhereUniqueInput!
  ): Destination

  """
  Unpublish one document from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishDocument(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: DocumentWhereUniqueInput!
  ): Document

  """
  Unpublish one email from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishEmail(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: EmailWhereUniqueInput!
  ): Email

  """
  Unpublish one product from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishProduct(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: ProductWhereUniqueInput!
  ): Product

  """
  Unpublish one shop from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishShop(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: ShopWhereUniqueInput!
  ): Shop

  """
  Unpublish one tour from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishTour(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Document to unpublish"""
    where: TourWhereUniqueInput!
  ): Tour

  """
  Unpublish one accommodation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishAccommodation(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: AccommodationWhereUniqueInput!
  ): Accommodation

  """
  Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishAsset(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: AssetWhereUniqueInput!
  ): Asset

  """
  Unpublish one blog from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishBlog(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: BlogWhereUniqueInput!
  ): Blog

  """
  Unpublish one destination from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishDestination(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: DestinationWhereUniqueInput!
  ): Destination

  """
  Unpublish one document from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishDocument(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: DocumentWhereUniqueInput!
  ): Document

  """
  Unpublish one email from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishEmail(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: EmailWhereUniqueInput!
  ): Email

  """Unpublish many Accommodation documents"""
  unpublishManyAccommodations(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: AccommodationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAccommodationsConnection)")

  """
  Find many Accommodation documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAccommodationsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: AccommodationManyWhereInput
  ): AccommodationConnection!

  """Unpublish many Asset documents"""
  unpublishManyAssets(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in each stage"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")

  """
  Find many Asset documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAssetsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int

    """Locales to unpublish"""
    locales: [Locale!]
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in draft stage"""
    where: AssetManyWhereInput
  ): AssetConnection!

  """Unpublish many Blog documents"""
  unpublishManyBlogs(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: BlogManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyBlogsConnection)")

  """
  Find many Blog documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyBlogsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: BlogManyWhereInput
  ): BlogConnection!

  """Unpublish many Destination documents"""
  unpublishManyDestinations(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: DestinationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyDestinationsConnection)")

  """
  Find many Destination documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyDestinationsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: DestinationManyWhereInput
  ): DestinationConnection!

  """Unpublish many Document documents"""
  unpublishManyDocuments(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: DocumentManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyDocumentsConnection)")

  """
  Find many Document documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyDocumentsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: DocumentManyWhereInput
  ): DocumentConnection!

  """Unpublish many Email documents"""
  unpublishManyEmails(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: EmailManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyEmailsConnection)")

  """
  Find many Email documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyEmailsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: EmailManyWhereInput
  ): EmailConnection!

  """Unpublish many Product documents"""
  unpublishManyProducts(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: ProductManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyProductsConnection)")

  """
  Find many Product documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyProductsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: ProductManyWhereInput
  ): ProductConnection!

  """Unpublish many Shop documents"""
  unpublishManyShops(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: ShopManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyShopsConnection)")

  """
  Find many Shop documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyShopsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: ShopManyWhereInput
  ): ShopConnection!

  """Unpublish many Tour documents"""
  unpublishManyTours(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage"""
    where: TourManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyToursConnection)")

  """
  Find many Tour documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyToursConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Identifies documents in draft stage"""
    where: TourManyWhereInput
  ): TourConnection!

  """
  Unpublish one product from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishProduct(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: ProductWhereUniqueInput!
  ): Product

  """
  Unpublish one shop from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishShop(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: ShopWhereUniqueInput!
  ): Shop

  """
  Unpublish one tour from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishTour(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """Document to unpublish"""
    where: TourWhereUniqueInput!
  ): Tour

  """Update one accommodation"""
  updateAccommodation(data: AccommodationUpdateInput!, where: AccommodationWhereUniqueInput!): Accommodation

  """Update one asset"""
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset

  """Update one blog"""
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog

  """Update one destination"""
  updateDestination(data: DestinationUpdateInput!, where: DestinationWhereUniqueInput!): Destination

  """Update one document"""
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document

  """Update one email"""
  updateEmail(data: EmailUpdateInput!, where: EmailWhereUniqueInput!): Email

  """Update many accommodations"""
  updateManyAccommodations(
    """Updates to document content"""
    data: AccommodationUpdateManyInput!

    """Documents to apply update on"""
    where: AccommodationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAccommodationsConnection)")

  """Update many Accommodation documents"""
  updateManyAccommodationsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: AccommodationUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: AccommodationManyWhereInput
  ): AccommodationConnection!

  """Update many assets"""
  updateManyAssets(
    """Updates to document content"""
    data: AssetUpdateManyInput!

    """Documents to apply update on"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")

  """Update many Asset documents"""
  updateManyAssetsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: AssetUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: AssetManyWhereInput
  ): AssetConnection!

  """Update many blogs"""
  updateManyBlogs(
    """Updates to document content"""
    data: BlogUpdateManyInput!

    """Documents to apply update on"""
    where: BlogManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyBlogsConnection)")

  """Update many Blog documents"""
  updateManyBlogsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: BlogUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: BlogManyWhereInput
  ): BlogConnection!

  """Update many destinations"""
  updateManyDestinations(
    """Updates to document content"""
    data: DestinationUpdateManyInput!

    """Documents to apply update on"""
    where: DestinationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyDestinationsConnection)")

  """Update many Destination documents"""
  updateManyDestinationsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: DestinationUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: DestinationManyWhereInput
  ): DestinationConnection!

  """Update many documents"""
  updateManyDocuments(
    """Updates to document content"""
    data: DocumentUpdateManyInput!

    """Documents to apply update on"""
    where: DocumentManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyDocumentsConnection)")

  """Update many Document documents"""
  updateManyDocumentsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: DocumentUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: DocumentManyWhereInput
  ): DocumentConnection!

  """Update many emails"""
  updateManyEmails(
    """Updates to document content"""
    data: EmailUpdateManyInput!

    """Documents to apply update on"""
    where: EmailManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyEmailsConnection)")

  """Update many Email documents"""
  updateManyEmailsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: EmailUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: EmailManyWhereInput
  ): EmailConnection!

  """Update many products"""
  updateManyProducts(
    """Updates to document content"""
    data: ProductUpdateManyInput!

    """Documents to apply update on"""
    where: ProductManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyProductsConnection)")

  """Update many Product documents"""
  updateManyProductsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: ProductUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: ProductManyWhereInput
  ): ProductConnection!

  """Update many shops"""
  updateManyShops(
    """Updates to document content"""
    data: ShopUpdateManyInput!

    """Documents to apply update on"""
    where: ShopManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyShopsConnection)")

  """Update many Shop documents"""
  updateManyShopsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: ShopUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: ShopManyWhereInput
  ): ShopConnection!

  """Update many tours"""
  updateManyTours(
    """Updates to document content"""
    data: TourUpdateManyInput!

    """Documents to apply update on"""
    where: TourManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyToursConnection)")

  """Update many Tour documents"""
  updateManyToursConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: TourUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: TourManyWhereInput
  ): TourConnection!

  """Update one product"""
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product

  """Update one scheduledRelease"""
  updateScheduledRelease(data: ScheduledReleaseUpdateInput!, where: ScheduledReleaseWhereUniqueInput!): ScheduledRelease

  """Update one shop"""
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop

  """Update one tour"""
  updateTour(data: TourUpdateInput!, where: TourWhereUniqueInput!): Tour

  """Upsert one accommodation"""
  upsertAccommodation(upsert: AccommodationUpsertInput!, where: AccommodationWhereUniqueInput!): Accommodation

  """Upsert one asset"""
  upsertAsset(upsert: AssetUpsertInput!, where: AssetWhereUniqueInput!): Asset

  """Upsert one blog"""
  upsertBlog(upsert: BlogUpsertInput!, where: BlogWhereUniqueInput!): Blog

  """Upsert one destination"""
  upsertDestination(upsert: DestinationUpsertInput!, where: DestinationWhereUniqueInput!): Destination

  """Upsert one document"""
  upsertDocument(upsert: DocumentUpsertInput!, where: DocumentWhereUniqueInput!): Document

  """Upsert one email"""
  upsertEmail(upsert: EmailUpsertInput!, where: EmailWhereUniqueInput!): Email

  """Upsert one product"""
  upsertProduct(upsert: ProductUpsertInput!, where: ProductWhereUniqueInput!): Product

  """Upsert one shop"""
  upsertShop(upsert: ShopUpsertInput!, where: ShopWhereUniqueInput!): Shop

  """Upsert one tour"""
  upsertTour(upsert: TourUpsertInput!, where: TourWhereUniqueInput!): Tour
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Number of items in the current page."""
  pageSize: Int

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Product implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: RichText

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Product!]!
  headerImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset

  """List of Product versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  image(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: AssetOrderByInput
    skip: Int
    where: AssetWhereInput
  ): [Asset!]!
  isFeatured: Boolean
  isVisible: Boolean
  location: [Location!]!
  price(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ProductPriceOrderByInput
    skip: Int
    where: ProductPriceWhereInput
  ): [ProductPrice!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shop(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `shop` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `shop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Shop
  shortDescription: String
  shortLocation: String
  slug: String

  """System stage field"""
  stage: Stage!
  subtitle: String
  title: String
  tour(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `tour` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `tour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Tour

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  youtubeLink: [String!]!
}

input ProductConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: ProductWhereUniqueInput!
}

"""A connection to a list of items."""
type ProductConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ProductEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ProductCreateInput {
  createdAt: DateTime
  description: RichTextAST
  headerImage: AssetCreateOneInlineInput
  image: AssetCreateManyInlineInput
  isFeatured: Boolean
  isVisible: Boolean
  location: [LocationInput!]
  price: ProductPriceCreateManyInlineInput
  shop: ShopCreateOneInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
  tour: TourCreateOneInlineInput
  updatedAt: DateTime
  youtubeLink: [String!]
}

input ProductCreateManyInlineInput {
  """Connect multiple existing Product documents"""
  connect: [ProductWhereUniqueInput!]

  """Create and connect multiple existing Product documents"""
  create: [ProductCreateInput!]
}

input ProductCreateOneInlineInput {
  """Connect one existing Product document"""
  connect: ProductWhereUniqueInput

  """Create and connect one Product document"""
  create: ProductCreateInput
}

"""An edge in a connection."""
type ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Product!
}

"""Identifies documents"""
input ProductManyWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: ProductWhereStageInput
  documentInStages_none: ProductWhereStageInput
  documentInStages_some: ProductWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  isFeatured: Boolean

  """Any other value that exists and is not equal to the given value."""
  isFeatured_not: Boolean
  isVisible: Boolean

  """Any other value that exists and is not equal to the given value."""
  isVisible_not: Boolean
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shop: ShopWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  tour: TourWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  youtubeLink: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  youtubeLink_contains_all: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  youtubeLink_contains_none: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  youtubeLink_contains_some: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  youtubeLink_not: [String!]
}

enum ProductOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isFeatured_ASC
  isFeatured_DESC
  isVisible_ASC
  isVisible_DESC
  publishedAt_ASC
  publishedAt_DESC
  shortDescription_ASC
  shortDescription_DESC
  shortLocation_ASC
  shortLocation_DESC
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  youtubeLink_ASC
  youtubeLink_DESC
}

type ProductPrice implements Entity {
  amountName: String

  """The unique identifier"""
  id: ID!
  isAvailable: Boolean
  isPromotion: Boolean
  price: Int
  quantity: Int

  """System stage field"""
  stage: Stage!
}

input ProductPriceConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: ProductPriceWhereUniqueInput!
}

"""A connection to a list of items."""
type ProductPriceConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ProductPriceEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ProductPriceCreateInput {
  amountName: String
  isAvailable: Boolean
  isPromotion: Boolean
  price: Int
  quantity: Int
}

input ProductPriceCreateManyInlineInput {
  """Create and connect multiple existing ProductPrice documents"""
  create: [ProductPriceCreateInput!]
}

input ProductPriceCreateOneInlineInput {
  """Create and connect one ProductPrice document"""
  create: ProductPriceCreateInput
}

input ProductPriceCreateWithPositionInput {
  """Document to create"""
  data: ProductPriceCreateInput!

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput
}

"""An edge in a connection."""
type ProductPriceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProductPrice!
}

"""Identifies documents"""
input ProductPriceManyWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductPriceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductPriceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductPriceWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  amountName: String

  """All values containing the given string."""
  amountName_contains: String

  """All values ending with the given string."""
  amountName_ends_with: String

  """All values that are contained in given list."""
  amountName_in: [String]

  """Any other value that exists and is not equal to the given value."""
  amountName_not: String

  """All values not containing the given string."""
  amountName_not_contains: String

  """All values not ending with the given string"""
  amountName_not_ends_with: String

  """All values that are not contained in given list."""
  amountName_not_in: [String]

  """All values not starting with the given string."""
  amountName_not_starts_with: String

  """All values starting with the given string."""
  amountName_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isAvailable: Boolean

  """Any other value that exists and is not equal to the given value."""
  isAvailable_not: Boolean
  isPromotion: Boolean

  """Any other value that exists and is not equal to the given value."""
  isPromotion_not: Boolean
  price: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int

  """All values that are contained in given list."""
  price_in: [Int]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """Any other value that exists and is not equal to the given value."""
  price_not: Int

  """All values that are not contained in given list."""
  price_not_in: [Int]
  quantity: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int

  """All values that are contained in given list."""
  quantity_in: [Int]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """Any other value that exists and is not equal to the given value."""
  quantity_not: Int

  """All values that are not contained in given list."""
  quantity_not_in: [Int]
}

enum ProductPriceOrderByInput {
  amountName_ASC
  amountName_DESC
  id_ASC
  id_DESC
  isAvailable_ASC
  isAvailable_DESC
  isPromotion_ASC
  isPromotion_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
}

union ProductPriceParent = Accommodation | Destination | Product | Tour

input ProductPriceParentConnectInput {
  Accommodation: AccommodationConnectInput
  Destination: DestinationConnectInput
  Product: ProductConnectInput
  Tour: TourConnectInput
}

input ProductPriceParentCreateInput {
  Accommodation: AccommodationCreateInput
  Destination: DestinationCreateInput
  Product: ProductCreateInput
  Tour: TourCreateInput
}

input ProductPriceParentCreateManyInlineInput {
  """Connect multiple existing ProductPriceParent documents"""
  connect: [ProductPriceParentWhereUniqueInput!]

  """Create and connect multiple existing ProductPriceParent documents"""
  create: [ProductPriceParentCreateInput!]
}

input ProductPriceParentCreateOneInlineInput {
  """Connect one existing ProductPriceParent document"""
  connect: ProductPriceParentWhereUniqueInput

  """Create and connect one ProductPriceParent document"""
  create: ProductPriceParentCreateInput
}

input ProductPriceParentUpdateInput {
  Accommodation: AccommodationUpdateInput
  Destination: DestinationUpdateInput
  Product: ProductUpdateInput
  Tour: TourUpdateInput
}

input ProductPriceParentUpdateManyInlineInput {
  """Connect multiple existing ProductPriceParent documents"""
  connect: [ProductPriceParentConnectInput!]

  """Create and connect multiple ProductPriceParent documents"""
  create: [ProductPriceParentCreateInput!]

  """Delete multiple ProductPriceParent documents"""
  delete: [ProductPriceParentWhereUniqueInput!]

  """Disconnect multiple ProductPriceParent documents"""
  disconnect: [ProductPriceParentWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing ProductPriceParent documents
  """
  set: [ProductPriceParentWhereUniqueInput!]

  """Update multiple ProductPriceParent documents"""
  update: [ProductPriceParentUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple ProductPriceParent documents"""
  upsert: [ProductPriceParentUpsertWithNestedWhereUniqueInput!]
}

input ProductPriceParentUpdateManyWithNestedWhereInput {
  Accommodation: AccommodationUpdateManyWithNestedWhereInput
  Destination: DestinationUpdateManyWithNestedWhereInput
  Product: ProductUpdateManyWithNestedWhereInput
  Tour: TourUpdateManyWithNestedWhereInput
}

input ProductPriceParentUpdateOneInlineInput {
  """Connect existing ProductPriceParent document"""
  connect: ProductPriceParentWhereUniqueInput

  """Create and connect one ProductPriceParent document"""
  create: ProductPriceParentCreateInput

  """Delete currently connected ProductPriceParent document"""
  delete: Boolean

  """Disconnect currently connected ProductPriceParent document"""
  disconnect: Boolean

  """Update single ProductPriceParent document"""
  update: ProductPriceParentUpdateWithNestedWhereUniqueInput

  """Upsert single ProductPriceParent document"""
  upsert: ProductPriceParentUpsertWithNestedWhereUniqueInput
}

input ProductPriceParentUpdateWithNestedWhereUniqueInput {
  Accommodation: AccommodationUpdateWithNestedWhereUniqueInput
  Destination: DestinationUpdateWithNestedWhereUniqueInput
  Product: ProductUpdateWithNestedWhereUniqueInput
  Tour: TourUpdateWithNestedWhereUniqueInput
}

input ProductPriceParentUpsertWithNestedWhereUniqueInput {
  Accommodation: AccommodationUpsertWithNestedWhereUniqueInput
  Destination: DestinationUpsertWithNestedWhereUniqueInput
  Product: ProductUpsertWithNestedWhereUniqueInput
  Tour: TourUpsertWithNestedWhereUniqueInput
}

input ProductPriceParentWhereInput {
  Accommodation: AccommodationWhereInput
  Destination: DestinationWhereInput
  Product: ProductWhereInput
  Tour: TourWhereInput
}

input ProductPriceParentWhereUniqueInput {
  Accommodation: AccommodationWhereUniqueInput
  Destination: DestinationWhereUniqueInput
  Product: ProductWhereUniqueInput
  Tour: TourWhereUniqueInput
}

input ProductPriceUpdateInput {
  amountName: String
  isAvailable: Boolean
  isPromotion: Boolean
  price: Int
  quantity: Int
}

input ProductPriceUpdateManyInlineInput {
  """Create and connect multiple ProductPrice component instances"""
  create: [ProductPriceCreateWithPositionInput!]

  """Delete multiple ProductPrice documents"""
  delete: [ProductPriceWhereUniqueInput!]

  """Update multiple ProductPrice component instances"""
  update: [ProductPriceUpdateWithNestedWhereUniqueAndPositionInput!]

  """Upsert multiple ProductPrice component instances"""
  upsert: [ProductPriceUpsertWithNestedWhereUniqueAndPositionInput!]
}

input ProductPriceUpdateManyInput {
  amountName: String
  isAvailable: Boolean
  isPromotion: Boolean
  price: Int
  quantity: Int
}

input ProductPriceUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: ProductPriceUpdateManyInput!

  """Document search"""
  where: ProductPriceWhereInput!
}

input ProductPriceUpdateOneInlineInput {
  """Create and connect one ProductPrice document"""
  create: ProductPriceCreateInput

  """Delete currently connected ProductPrice document"""
  delete: Boolean

  """Update single ProductPrice document"""
  update: ProductPriceUpdateWithNestedWhereUniqueInput

  """Upsert single ProductPrice document"""
  upsert: ProductPriceUpsertWithNestedWhereUniqueInput
}

input ProductPriceUpdateWithNestedWhereUniqueAndPositionInput {
  """Document to update"""
  data: ProductPriceUpdateInput

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput

  """Unique component instance search"""
  where: ProductPriceWhereUniqueInput!
}

input ProductPriceUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: ProductPriceUpdateInput!

  """Unique document search"""
  where: ProductPriceWhereUniqueInput!
}

input ProductPriceUpsertInput {
  """Create document if it didn't exist"""
  create: ProductPriceCreateInput!

  """Update document if it exists"""
  update: ProductPriceUpdateInput!
}

input ProductPriceUpsertWithNestedWhereUniqueAndPositionInput {
  """Document to upsert"""
  data: ProductPriceUpsertInput

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput

  """Unique component instance search"""
  where: ProductPriceWhereUniqueInput!
}

input ProductPriceUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: ProductPriceUpsertInput!

  """Unique document search"""
  where: ProductPriceWhereUniqueInput!
}

"""Identifies documents"""
input ProductPriceWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductPriceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductPriceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductPriceWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  amountName: String

  """All values containing the given string."""
  amountName_contains: String

  """All values ending with the given string."""
  amountName_ends_with: String

  """All values that are contained in given list."""
  amountName_in: [String]

  """Any other value that exists and is not equal to the given value."""
  amountName_not: String

  """All values not containing the given string."""
  amountName_not_contains: String

  """All values not ending with the given string"""
  amountName_not_ends_with: String

  """All values that are not contained in given list."""
  amountName_not_in: [String]

  """All values not starting with the given string."""
  amountName_not_starts_with: String

  """All values starting with the given string."""
  amountName_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isAvailable: Boolean

  """Any other value that exists and is not equal to the given value."""
  isAvailable_not: Boolean
  isPromotion: Boolean

  """Any other value that exists and is not equal to the given value."""
  isPromotion_not: Boolean
  price: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int

  """All values that are contained in given list."""
  price_in: [Int]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """Any other value that exists and is not equal to the given value."""
  price_not: Int

  """All values that are not contained in given list."""
  price_not_in: [Int]
  quantity: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int

  """All values that are contained in given list."""
  quantity_in: [Int]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """Any other value that exists and is not equal to the given value."""
  quantity_not: Int

  """All values that are not contained in given list."""
  quantity_not_in: [Int]
}

"""References ProductPrice record uniquely"""
input ProductPriceWhereUniqueInput {
  id: ID
}

input ProductUpdateInput {
  description: RichTextAST
  headerImage: AssetUpdateOneInlineInput
  image: AssetUpdateManyInlineInput
  isFeatured: Boolean
  isVisible: Boolean
  location: [LocationInput!]
  price: ProductPriceUpdateManyInlineInput
  shop: ShopUpdateOneInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
  tour: TourUpdateOneInlineInput
  youtubeLink: [String!]
}

input ProductUpdateManyInlineInput {
  """Connect multiple existing Product documents"""
  connect: [ProductConnectInput!]

  """Create and connect multiple Product documents"""
  create: [ProductCreateInput!]

  """Delete multiple Product documents"""
  delete: [ProductWhereUniqueInput!]

  """Disconnect multiple Product documents"""
  disconnect: [ProductWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Product documents
  """
  set: [ProductWhereUniqueInput!]

  """Update multiple Product documents"""
  update: [ProductUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Product documents"""
  upsert: [ProductUpsertWithNestedWhereUniqueInput!]
}

input ProductUpdateManyInput {
  description: RichTextAST
  isFeatured: Boolean
  isVisible: Boolean
  location: [LocationInput!]
  shortDescription: String
  shortLocation: String
  subtitle: String
  title: String
  youtubeLink: [String!]
}

input ProductUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: ProductUpdateManyInput!

  """Document search"""
  where: ProductWhereInput!
}

input ProductUpdateOneInlineInput {
  """Connect existing Product document"""
  connect: ProductWhereUniqueInput

  """Create and connect one Product document"""
  create: ProductCreateInput

  """Delete currently connected Product document"""
  delete: Boolean

  """Disconnect currently connected Product document"""
  disconnect: Boolean

  """Update single Product document"""
  update: ProductUpdateWithNestedWhereUniqueInput

  """Upsert single Product document"""
  upsert: ProductUpsertWithNestedWhereUniqueInput
}

input ProductUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: ProductUpdateInput!

  """Unique document search"""
  where: ProductWhereUniqueInput!
}

input ProductUpsertInput {
  """Create document if it didn't exist"""
  create: ProductCreateInput!

  """Update document if it exists"""
  update: ProductUpdateInput!
}

input ProductUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: ProductUpsertInput!

  """Unique document search"""
  where: ProductWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input ProductWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: ProductWhereStageInput
  documentInStages_none: ProductWhereStageInput
  documentInStages_some: ProductWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  isFeatured: Boolean

  """Any other value that exists and is not equal to the given value."""
  isFeatured_not: Boolean
  isVisible: Boolean

  """Any other value that exists and is not equal to the given value."""
  isVisible_not: Boolean
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shop: ShopWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  tour: TourWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  youtubeLink: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  youtubeLink_contains_all: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  youtubeLink_contains_none: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  youtubeLink_contains_some: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  youtubeLink_not: [String!]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input ProductWhereStageInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: ProductWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Product record uniquely"""
input ProductWhereUniqueInput {
  id: ID
  slug: String
}

input PublishLocaleInput {
  """Locales to publish"""
  locale: Locale!

  """Stages to publish selected locales to"""
  stages: [Stage!]!
}

type Query {
  """Retrieve a single accommodation"""
  accommodation(
    """
    Defines which locales should be returned.
    
    Note that `Accommodation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: AccommodationWhereUniqueInput!
  ): Accommodation

  """Retrieve document version"""
  accommodationVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple accommodations"""
  accommodations(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Accommodation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: AccommodationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: AccommodationWhereInput
  ): [Accommodation!]!

  """Retrieve multiple accommodations using the Relay connection interface"""
  accommodationsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Accommodation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: AccommodationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: AccommodationWhereInput
  ): AccommodationConnection!

  """Retrieve a single asset"""
  asset(
    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: AssetWhereUniqueInput!
  ): Asset

  """Retrieve document version"""
  assetVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple assets"""
  assets(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: AssetOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: AssetWhereInput
  ): [Asset!]!

  """Retrieve multiple assets using the Relay connection interface"""
  assetsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: AssetOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: AssetWhereInput
  ): AssetConnection!

  """Retrieve a single blog"""
  blog(
    """
    Defines which locales should be returned.
    
    Note that `Blog` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: BlogWhereUniqueInput!
  ): Blog

  """Retrieve document version"""
  blogVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple blogs"""
  blogs(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Blog` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: BlogOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: BlogWhereInput
  ): [Blog!]!

  """Retrieve multiple blogs using the Relay connection interface"""
  blogsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Blog` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: BlogOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: BlogWhereInput
  ): BlogConnection!

  """Retrieve a single destination"""
  destination(
    """
    Defines which locales should be returned.
    
    Note that `Destination` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: DestinationWhereUniqueInput!
  ): Destination

  """Retrieve document version"""
  destinationVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple destinations"""
  destinations(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Destination` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: DestinationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: DestinationWhereInput
  ): [Destination!]!

  """Retrieve multiple destinations using the Relay connection interface"""
  destinationsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Destination` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: DestinationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: DestinationWhereInput
  ): DestinationConnection!

  """Retrieve a single document"""
  document(
    """
    Defines which locales should be returned.
    
    Note that `Document` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: DocumentWhereUniqueInput!
  ): Document

  """Retrieve document version"""
  documentVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple documents"""
  documents(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Document` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: DocumentOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: DocumentWhereInput
  ): [Document!]!

  """Retrieve multiple documents using the Relay connection interface"""
  documentsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Document` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: DocumentOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: DocumentWhereInput
  ): DocumentConnection!

  """Retrieve a single email"""
  email(
    """
    Defines which locales should be returned.
    
    Note that `Email` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: EmailWhereUniqueInput!
  ): Email

  """Retrieve document version"""
  emailVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple emails"""
  emails(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Email` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: EmailOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: EmailWhereInput
  ): [Email!]!

  """Retrieve multiple emails using the Relay connection interface"""
  emailsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Email` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: EmailOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: EmailWhereInput
  ): EmailConnection!

  """Fetches an object given its ID"""
  entities(
    """Defines which locales to query for"""
    locales: [Locale!]

    """The where parameters to query components"""
    where: [EntityWhereInput!]!
  ): [Entity!]

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!

    """
    Defines which locales should be returned.
    
    Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
  ): Node

  """Retrieve a single product"""
  product(
    """
    Defines which locales should be returned.
    
    Note that `Product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: ProductWhereUniqueInput!
  ): Product

  """Retrieve document version"""
  productVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple products"""
  products(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ProductOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ProductWhereInput
  ): [Product!]!

  """Retrieve multiple products using the Relay connection interface"""
  productsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ProductOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ProductWhereInput
  ): ProductConnection!

  """Retrieve a single scheduledOperation"""
  scheduledOperation(
    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: ScheduledOperationWhereUniqueInput!
  ): ScheduledOperation

  """Retrieve multiple scheduledOperations"""
  scheduledOperations(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """
  Retrieve multiple scheduledOperations using the Relay connection interface
  """
  scheduledOperationsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledOperationWhereInput
  ): ScheduledOperationConnection!

  """Retrieve a single scheduledRelease"""
  scheduledRelease(
    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: ScheduledReleaseWhereUniqueInput!
  ): ScheduledRelease

  """Retrieve multiple scheduledReleases"""
  scheduledReleases(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledReleaseOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledReleaseWhereInput
  ): [ScheduledRelease!]!

  """
  Retrieve multiple scheduledReleases using the Relay connection interface
  """
  scheduledReleasesConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledReleaseOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledReleaseWhereInput
  ): ScheduledReleaseConnection!

  """Retrieve a single shop"""
  shop(
    """
    Defines which locales should be returned.
    
    Note that `Shop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: ShopWhereUniqueInput!
  ): Shop

  """Retrieve document version"""
  shopVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple shops"""
  shops(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Shop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ShopOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ShopWhereInput
  ): [Shop!]!

  """Retrieve multiple shops using the Relay connection interface"""
  shopsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Shop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ShopOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ShopWhereInput
  ): ShopConnection!

  """Retrieve a single tour"""
  tour(
    """
    Defines which locales should be returned.
    
    Note that `Tour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: TourWhereUniqueInput!
  ): Tour

  """Retrieve document version"""
  tourVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple tours"""
  tours(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Tour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: TourOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: TourWhereInput
  ): [Tour!]!

  """Retrieve multiple tours using the Relay connection interface"""
  toursConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Tour` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: TourOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: TourWhereInput
  ): TourConnection!

  """Retrieve a single user"""
  user(
    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: UserWhereUniqueInput!
  ): User

  """Retrieve multiple users"""
  users(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: UserOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: UserWhereInput
  ): [User!]!

  """Retrieve multiple users using the Relay connection interface"""
  usersConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: UserOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: UserWhereInput
  ): UserConnection!
}

"""
Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
type RGBA {
  a: RGBATransparency!
  b: RGBAHue!
  g: RGBAHue!
  r: RGBAHue!
}

scalar RGBAHue

"""
Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
input RGBAInput {
  a: RGBATransparency!
  b: RGBAHue!
  g: RGBAHue!
  r: RGBAHue!
}

scalar RGBATransparency

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type RichText {
  """Returns HTMl representation"""
  html: String!

  """Returns Markdown representation"""
  markdown: String!

  """Returns AST representation"""
  raw: RichTextAST!

  """Returns plain-text contents of RichText"""
  text: String!
}

"""Slate-compatible RichText AST"""
scalar RichTextAST

"""Scheduled Operation system model"""
type ScheduledOperation implements Entity & Node {
  affectedDocuments(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
  ): [ScheduledOperationAffectedDocument!]!

  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Operation description"""
  description: String

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [ScheduledOperation!]!

  """Operation error message"""
  errorMessage: String

  """The unique identifier"""
  id: ID!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """
  Raw operation payload including all details, this field is subject to change
  """
  rawPayload: Json!

  """The release this operation is scheduled for"""
  release(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): ScheduledRelease

  """System stage field"""
  stage: Stage!

  """operation Status"""
  status: ScheduledOperationStatus!

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

union ScheduledOperationAffectedDocument = Accommodation | Asset | Blog | Destination | Document | Email | Product | Shop | Tour

input ScheduledOperationConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: ScheduledOperationWhereUniqueInput!
}

"""A connection to a list of items."""
type ScheduledOperationConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ScheduledOperationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ScheduledOperationCreateManyInlineInput {
  """Connect multiple existing ScheduledOperation documents"""
  connect: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationCreateOneInlineInput {
  """Connect one existing ScheduledOperation document"""
  connect: ScheduledOperationWhereUniqueInput
}

"""An edge in a connection."""
type ScheduledOperationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScheduledOperation!
}

"""Identifies documents"""
input ScheduledOperationManyWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduledOperationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledOperationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledOperationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  errorMessage: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """Any other value that exists and is not equal to the given value."""
  errorMessage_not: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values starting with the given string."""
  errorMessage_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput

  """All values containing the given json path."""
  rawPayload_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  rawPayload_value_recursive: Json
  release: ScheduledReleaseWhereInput
  status: ScheduledOperationStatus

  """All values that are contained in given list."""
  status_in: [ScheduledOperationStatus]

  """Any other value that exists and is not equal to the given value."""
  status_not: ScheduledOperationStatus

  """All values that are not contained in given list."""
  status_not_in: [ScheduledOperationStatus]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum ScheduledOperationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  errorMessage_ASC
  errorMessage_DESC
  id_ASC
  id_DESC
  publishedAt_ASC
  publishedAt_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""System Scheduled Operation Status"""
enum ScheduledOperationStatus {
  CANCELED
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

input ScheduledOperationUpdateManyInlineInput {
  """Connect multiple existing ScheduledOperation documents"""
  connect: [ScheduledOperationConnectInput!]

  """Disconnect multiple ScheduledOperation documents"""
  disconnect: [ScheduledOperationWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing ScheduledOperation documents
  """
  set: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationUpdateOneInlineInput {
  """Connect existing ScheduledOperation document"""
  connect: ScheduledOperationWhereUniqueInput

  """Disconnect currently connected ScheduledOperation document"""
  disconnect: Boolean
}

"""Identifies documents"""
input ScheduledOperationWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduledOperationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledOperationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledOperationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  errorMessage: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """Any other value that exists and is not equal to the given value."""
  errorMessage_not: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values starting with the given string."""
  errorMessage_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput

  """All values containing the given json path."""
  rawPayload_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  rawPayload_value_recursive: Json
  release: ScheduledReleaseWhereInput
  status: ScheduledOperationStatus

  """All values that are contained in given list."""
  status_in: [ScheduledOperationStatus]

  """Any other value that exists and is not equal to the given value."""
  status_not: ScheduledOperationStatus

  """All values that are not contained in given list."""
  status_not_in: [ScheduledOperationStatus]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""References ScheduledOperation record uniquely"""
input ScheduledOperationWhereUniqueInput {
  id: ID
}

"""Scheduled Release system model"""
type ScheduledRelease implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Release description"""
  description: String

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [ScheduledRelease!]!

  """Release error message"""
  errorMessage: String

  """The unique identifier"""
  id: ID!

  """Whether scheduled release should be run"""
  isActive: Boolean!

  """Whether scheduled release is implicit"""
  isImplicit: Boolean!

  """Operations to run with this release"""
  operations(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Release date and time"""
  releaseAt: DateTime

  """System stage field"""
  stage: Stage!

  """Release Status"""
  status: ScheduledReleaseStatus!

  """Release Title"""
  title: String

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input ScheduledReleaseConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: ScheduledReleaseWhereUniqueInput!
}

"""A connection to a list of items."""
type ScheduledReleaseConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ScheduledReleaseEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ScheduledReleaseCreateInput {
  createdAt: DateTime
  description: String
  errorMessage: String
  isActive: Boolean = true
  releaseAt: DateTime
  title: String
  updatedAt: DateTime
}

input ScheduledReleaseCreateManyInlineInput {
  """Connect multiple existing ScheduledRelease documents"""
  connect: [ScheduledReleaseWhereUniqueInput!]

  """Create and connect multiple existing ScheduledRelease documents"""
  create: [ScheduledReleaseCreateInput!]
}

input ScheduledReleaseCreateOneInlineInput {
  """Connect one existing ScheduledRelease document"""
  connect: ScheduledReleaseWhereUniqueInput

  """Create and connect one ScheduledRelease document"""
  create: ScheduledReleaseCreateInput
}

"""An edge in a connection."""
type ScheduledReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScheduledRelease!
}

"""Identifies documents"""
input ScheduledReleaseManyWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduledReleaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledReleaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledReleaseWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  errorMessage: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """Any other value that exists and is not equal to the given value."""
  errorMessage_not: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values starting with the given string."""
  errorMessage_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isActive: Boolean

  """Any other value that exists and is not equal to the given value."""
  isActive_not: Boolean
  isImplicit: Boolean

  """Any other value that exists and is not equal to the given value."""
  isImplicit_not: Boolean
  operations_every: ScheduledOperationWhereInput
  operations_none: ScheduledOperationWhereInput
  operations_some: ScheduledOperationWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  releaseAt: DateTime

  """All values greater than the given value."""
  releaseAt_gt: DateTime

  """All values greater than or equal the given value."""
  releaseAt_gte: DateTime

  """All values that are contained in given list."""
  releaseAt_in: [DateTime]

  """All values less than the given value."""
  releaseAt_lt: DateTime

  """All values less than or equal the given value."""
  releaseAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  releaseAt_not: DateTime

  """All values that are not contained in given list."""
  releaseAt_not_in: [DateTime]
  status: ScheduledReleaseStatus

  """All values that are contained in given list."""
  status_in: [ScheduledReleaseStatus]

  """Any other value that exists and is not equal to the given value."""
  status_not: ScheduledReleaseStatus

  """All values that are not contained in given list."""
  status_not_in: [ScheduledReleaseStatus]
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum ScheduledReleaseOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  errorMessage_ASC
  errorMessage_DESC
  id_ASC
  id_DESC
  isActive_ASC
  isActive_DESC
  isImplicit_ASC
  isImplicit_DESC
  publishedAt_ASC
  publishedAt_DESC
  releaseAt_ASC
  releaseAt_DESC
  status_ASC
  status_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""System Scheduled Release Status"""
enum ScheduledReleaseStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

input ScheduledReleaseUpdateInput {
  description: String
  errorMessage: String
  isActive: Boolean
  releaseAt: DateTime
  title: String
}

input ScheduledReleaseUpdateManyInlineInput {
  """Connect multiple existing ScheduledRelease documents"""
  connect: [ScheduledReleaseConnectInput!]

  """Create and connect multiple ScheduledRelease documents"""
  create: [ScheduledReleaseCreateInput!]

  """Delete multiple ScheduledRelease documents"""
  delete: [ScheduledReleaseWhereUniqueInput!]

  """Disconnect multiple ScheduledRelease documents"""
  disconnect: [ScheduledReleaseWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing ScheduledRelease documents
  """
  set: [ScheduledReleaseWhereUniqueInput!]

  """Update multiple ScheduledRelease documents"""
  update: [ScheduledReleaseUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple ScheduledRelease documents"""
  upsert: [ScheduledReleaseUpsertWithNestedWhereUniqueInput!]
}

input ScheduledReleaseUpdateManyInput {
  description: String
  errorMessage: String
  isActive: Boolean
  releaseAt: DateTime
  title: String
}

input ScheduledReleaseUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: ScheduledReleaseUpdateManyInput!

  """Document search"""
  where: ScheduledReleaseWhereInput!
}

input ScheduledReleaseUpdateOneInlineInput {
  """Connect existing ScheduledRelease document"""
  connect: ScheduledReleaseWhereUniqueInput

  """Create and connect one ScheduledRelease document"""
  create: ScheduledReleaseCreateInput

  """Delete currently connected ScheduledRelease document"""
  delete: Boolean

  """Disconnect currently connected ScheduledRelease document"""
  disconnect: Boolean

  """Update single ScheduledRelease document"""
  update: ScheduledReleaseUpdateWithNestedWhereUniqueInput

  """Upsert single ScheduledRelease document"""
  upsert: ScheduledReleaseUpsertWithNestedWhereUniqueInput
}

input ScheduledReleaseUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: ScheduledReleaseUpdateInput!

  """Unique document search"""
  where: ScheduledReleaseWhereUniqueInput!
}

input ScheduledReleaseUpsertInput {
  """Create document if it didn't exist"""
  create: ScheduledReleaseCreateInput!

  """Update document if it exists"""
  update: ScheduledReleaseUpdateInput!
}

input ScheduledReleaseUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: ScheduledReleaseUpsertInput!

  """Unique document search"""
  where: ScheduledReleaseWhereUniqueInput!
}

"""Identifies documents"""
input ScheduledReleaseWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduledReleaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledReleaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledReleaseWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  errorMessage: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """Any other value that exists and is not equal to the given value."""
  errorMessage_not: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values starting with the given string."""
  errorMessage_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isActive: Boolean

  """Any other value that exists and is not equal to the given value."""
  isActive_not: Boolean
  isImplicit: Boolean

  """Any other value that exists and is not equal to the given value."""
  isImplicit_not: Boolean
  operations_every: ScheduledOperationWhereInput
  operations_none: ScheduledOperationWhereInput
  operations_some: ScheduledOperationWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  releaseAt: DateTime

  """All values greater than the given value."""
  releaseAt_gt: DateTime

  """All values greater than or equal the given value."""
  releaseAt_gte: DateTime

  """All values that are contained in given list."""
  releaseAt_in: [DateTime]

  """All values less than the given value."""
  releaseAt_lt: DateTime

  """All values less than or equal the given value."""
  releaseAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  releaseAt_not: DateTime

  """All values that are not contained in given list."""
  releaseAt_not_in: [DateTime]
  status: ScheduledReleaseStatus

  """All values that are contained in given list."""
  status_in: [ScheduledReleaseStatus]

  """Any other value that exists and is not equal to the given value."""
  status_not: ScheduledReleaseStatus

  """All values that are not contained in given list."""
  status_not_in: [ScheduledReleaseStatus]
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""References ScheduledRelease record uniquely"""
input ScheduledReleaseWhereUniqueInput {
  id: ID
}

type Shop implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: RichText

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Shop!]!
  gmapsLink: String

  """List of Shop versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  instagramLink: String
  location: Location

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shopLogo(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `shopLogo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `shopLogo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset
  shopName: String
  shopProduct(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `shopProduct` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `shopProduct` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
  ): [ShopShopProduct!]!
  shortDescription: String
  slug: String

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  waNumber: String
}

input ShopConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: ShopWhereUniqueInput!
}

"""A connection to a list of items."""
type ShopConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ShopEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ShopCreateInput {
  createdAt: DateTime
  description: RichTextAST
  gmapsLink: String
  instagramLink: String
  location: LocationInput
  shopLogo: AssetCreateOneInlineInput
  shopName: String
  shopProduct: ShopShopProductCreateManyInlineInput
  shortDescription: String
  slug: String
  updatedAt: DateTime
  waNumber: String
}

input ShopCreateManyInlineInput {
  """Connect multiple existing Shop documents"""
  connect: [ShopWhereUniqueInput!]

  """Create and connect multiple existing Shop documents"""
  create: [ShopCreateInput!]
}

input ShopCreateOneInlineInput {
  """Connect one existing Shop document"""
  connect: ShopWhereUniqueInput

  """Create and connect one Shop document"""
  create: ShopCreateInput
}

"""An edge in a connection."""
type ShopEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Shop!
}

"""Identifies documents"""
input ShopManyWhereInput {
  """Logical AND on all given filters."""
  AND: [ShopWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShopWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShopWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: ShopWhereStageInput
  documentInStages_none: ShopWhereStageInput
  documentInStages_some: ShopWhereStageInput
  gmapsLink: String

  """All values containing the given string."""
  gmapsLink_contains: String

  """All values ending with the given string."""
  gmapsLink_ends_with: String

  """All values that are contained in given list."""
  gmapsLink_in: [String]

  """Any other value that exists and is not equal to the given value."""
  gmapsLink_not: String

  """All values not containing the given string."""
  gmapsLink_not_contains: String

  """All values not ending with the given string"""
  gmapsLink_not_ends_with: String

  """All values that are not contained in given list."""
  gmapsLink_not_in: [String]

  """All values not starting with the given string."""
  gmapsLink_not_starts_with: String

  """All values starting with the given string."""
  gmapsLink_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  instagramLink: String

  """All values containing the given string."""
  instagramLink_contains: String

  """All values ending with the given string."""
  instagramLink_ends_with: String

  """All values that are contained in given list."""
  instagramLink_in: [String]

  """Any other value that exists and is not equal to the given value."""
  instagramLink_not: String

  """All values not containing the given string."""
  instagramLink_not_contains: String

  """All values not ending with the given string"""
  instagramLink_not_ends_with: String

  """All values that are not contained in given list."""
  instagramLink_not_in: [String]

  """All values not starting with the given string."""
  instagramLink_not_starts_with: String

  """All values starting with the given string."""
  instagramLink_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shopLogo: AssetWhereInput
  shopName: String

  """All values containing the given string."""
  shopName_contains: String

  """All values ending with the given string."""
  shopName_ends_with: String

  """All values that are contained in given list."""
  shopName_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shopName_not: String

  """All values not containing the given string."""
  shopName_not_contains: String

  """All values not ending with the given string"""
  shopName_not_ends_with: String

  """All values that are not contained in given list."""
  shopName_not_in: [String]

  """All values not starting with the given string."""
  shopName_not_starts_with: String

  """All values starting with the given string."""
  shopName_starts_with: String

  """All values in which the union is empty"""
  shopProduct_empty: Boolean

  """
  Matches if the union contains at least one connection to the provided item to the filter
  """
  shopProduct_some: ShopShopProductWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
  waNumber: String

  """All values containing the given string."""
  waNumber_contains: String

  """All values ending with the given string."""
  waNumber_ends_with: String

  """All values that are contained in given list."""
  waNumber_in: [String]

  """Any other value that exists and is not equal to the given value."""
  waNumber_not: String

  """All values not containing the given string."""
  waNumber_not_contains: String

  """All values not ending with the given string"""
  waNumber_not_ends_with: String

  """All values that are not contained in given list."""
  waNumber_not_in: [String]

  """All values not starting with the given string."""
  waNumber_not_starts_with: String

  """All values starting with the given string."""
  waNumber_starts_with: String
}

enum ShopOrderByInput {
  createdAt_ASC
  createdAt_DESC
  gmapsLink_ASC
  gmapsLink_DESC
  id_ASC
  id_DESC
  instagramLink_ASC
  instagramLink_DESC
  publishedAt_ASC
  publishedAt_DESC
  shopName_ASC
  shopName_DESC
  shortDescription_ASC
  shortDescription_DESC
  slug_ASC
  slug_DESC
  updatedAt_ASC
  updatedAt_DESC
  waNumber_ASC
  waNumber_DESC
}

union ShopShopProduct = Destination | Product | Tour

input ShopShopProductConnectInput {
  Destination: DestinationConnectInput
  Product: ProductConnectInput
  Tour: TourConnectInput
}

input ShopShopProductCreateInput {
  Destination: DestinationCreateInput
  Product: ProductCreateInput
  Tour: TourCreateInput
}

input ShopShopProductCreateManyInlineInput {
  """Connect multiple existing ShopShopProduct documents"""
  connect: [ShopShopProductWhereUniqueInput!]

  """Create and connect multiple existing ShopShopProduct documents"""
  create: [ShopShopProductCreateInput!]
}

input ShopShopProductCreateOneInlineInput {
  """Connect one existing ShopShopProduct document"""
  connect: ShopShopProductWhereUniqueInput

  """Create and connect one ShopShopProduct document"""
  create: ShopShopProductCreateInput
}

input ShopShopProductUpdateInput {
  Destination: DestinationUpdateInput
  Product: ProductUpdateInput
  Tour: TourUpdateInput
}

input ShopShopProductUpdateManyInlineInput {
  """Connect multiple existing ShopShopProduct documents"""
  connect: [ShopShopProductConnectInput!]

  """Create and connect multiple ShopShopProduct documents"""
  create: [ShopShopProductCreateInput!]

  """Delete multiple ShopShopProduct documents"""
  delete: [ShopShopProductWhereUniqueInput!]

  """Disconnect multiple ShopShopProduct documents"""
  disconnect: [ShopShopProductWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing ShopShopProduct documents
  """
  set: [ShopShopProductWhereUniqueInput!]

  """Update multiple ShopShopProduct documents"""
  update: [ShopShopProductUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple ShopShopProduct documents"""
  upsert: [ShopShopProductUpsertWithNestedWhereUniqueInput!]
}

input ShopShopProductUpdateManyWithNestedWhereInput {
  Destination: DestinationUpdateManyWithNestedWhereInput
  Product: ProductUpdateManyWithNestedWhereInput
  Tour: TourUpdateManyWithNestedWhereInput
}

input ShopShopProductUpdateOneInlineInput {
  """Connect existing ShopShopProduct document"""
  connect: ShopShopProductWhereUniqueInput

  """Create and connect one ShopShopProduct document"""
  create: ShopShopProductCreateInput

  """Delete currently connected ShopShopProduct document"""
  delete: Boolean

  """Disconnect currently connected ShopShopProduct document"""
  disconnect: Boolean

  """Update single ShopShopProduct document"""
  update: ShopShopProductUpdateWithNestedWhereUniqueInput

  """Upsert single ShopShopProduct document"""
  upsert: ShopShopProductUpsertWithNestedWhereUniqueInput
}

input ShopShopProductUpdateWithNestedWhereUniqueInput {
  Destination: DestinationUpdateWithNestedWhereUniqueInput
  Product: ProductUpdateWithNestedWhereUniqueInput
  Tour: TourUpdateWithNestedWhereUniqueInput
}

input ShopShopProductUpsertWithNestedWhereUniqueInput {
  Destination: DestinationUpsertWithNestedWhereUniqueInput
  Product: ProductUpsertWithNestedWhereUniqueInput
  Tour: TourUpsertWithNestedWhereUniqueInput
}

input ShopShopProductWhereInput {
  Destination: DestinationWhereInput
  Product: ProductWhereInput
  Tour: TourWhereInput
}

input ShopShopProductWhereUniqueInput {
  Destination: DestinationWhereUniqueInput
  Product: ProductWhereUniqueInput
  Tour: TourWhereUniqueInput
}

input ShopUpdateInput {
  description: RichTextAST
  gmapsLink: String
  instagramLink: String
  location: LocationInput
  shopLogo: AssetUpdateOneInlineInput
  shopName: String
  shopProduct: ShopShopProductUpdateManyInlineInput
  shortDescription: String
  slug: String
  waNumber: String
}

input ShopUpdateManyInlineInput {
  """Connect multiple existing Shop documents"""
  connect: [ShopConnectInput!]

  """Create and connect multiple Shop documents"""
  create: [ShopCreateInput!]

  """Delete multiple Shop documents"""
  delete: [ShopWhereUniqueInput!]

  """Disconnect multiple Shop documents"""
  disconnect: [ShopWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Shop documents
  """
  set: [ShopWhereUniqueInput!]

  """Update multiple Shop documents"""
  update: [ShopUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Shop documents"""
  upsert: [ShopUpsertWithNestedWhereUniqueInput!]
}

input ShopUpdateManyInput {
  description: RichTextAST
  gmapsLink: String
  instagramLink: String
  location: LocationInput
  shopName: String
  shortDescription: String
  waNumber: String
}

input ShopUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: ShopUpdateManyInput!

  """Document search"""
  where: ShopWhereInput!
}

input ShopUpdateOneInlineInput {
  """Connect existing Shop document"""
  connect: ShopWhereUniqueInput

  """Create and connect one Shop document"""
  create: ShopCreateInput

  """Delete currently connected Shop document"""
  delete: Boolean

  """Disconnect currently connected Shop document"""
  disconnect: Boolean

  """Update single Shop document"""
  update: ShopUpdateWithNestedWhereUniqueInput

  """Upsert single Shop document"""
  upsert: ShopUpsertWithNestedWhereUniqueInput
}

input ShopUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: ShopUpdateInput!

  """Unique document search"""
  where: ShopWhereUniqueInput!
}

input ShopUpsertInput {
  """Create document if it didn't exist"""
  create: ShopCreateInput!

  """Update document if it exists"""
  update: ShopUpdateInput!
}

input ShopUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: ShopUpsertInput!

  """Unique document search"""
  where: ShopWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input ShopWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input ShopWhereInput {
  """Logical AND on all given filters."""
  AND: [ShopWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShopWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShopWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: ShopWhereStageInput
  documentInStages_none: ShopWhereStageInput
  documentInStages_some: ShopWhereStageInput
  gmapsLink: String

  """All values containing the given string."""
  gmapsLink_contains: String

  """All values ending with the given string."""
  gmapsLink_ends_with: String

  """All values that are contained in given list."""
  gmapsLink_in: [String]

  """Any other value that exists and is not equal to the given value."""
  gmapsLink_not: String

  """All values not containing the given string."""
  gmapsLink_not_contains: String

  """All values not ending with the given string"""
  gmapsLink_not_ends_with: String

  """All values that are not contained in given list."""
  gmapsLink_not_in: [String]

  """All values not starting with the given string."""
  gmapsLink_not_starts_with: String

  """All values starting with the given string."""
  gmapsLink_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  instagramLink: String

  """All values containing the given string."""
  instagramLink_contains: String

  """All values ending with the given string."""
  instagramLink_ends_with: String

  """All values that are contained in given list."""
  instagramLink_in: [String]

  """Any other value that exists and is not equal to the given value."""
  instagramLink_not: String

  """All values not containing the given string."""
  instagramLink_not_contains: String

  """All values not ending with the given string"""
  instagramLink_not_ends_with: String

  """All values that are not contained in given list."""
  instagramLink_not_in: [String]

  """All values not starting with the given string."""
  instagramLink_not_starts_with: String

  """All values starting with the given string."""
  instagramLink_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shopLogo: AssetWhereInput
  shopName: String

  """All values containing the given string."""
  shopName_contains: String

  """All values ending with the given string."""
  shopName_ends_with: String

  """All values that are contained in given list."""
  shopName_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shopName_not: String

  """All values not containing the given string."""
  shopName_not_contains: String

  """All values not ending with the given string"""
  shopName_not_ends_with: String

  """All values that are not contained in given list."""
  shopName_not_in: [String]

  """All values not starting with the given string."""
  shopName_not_starts_with: String

  """All values starting with the given string."""
  shopName_starts_with: String

  """All values in which the union is empty"""
  shopProduct_empty: Boolean

  """
  Matches if the union contains at least one connection to the provided item to the filter
  """
  shopProduct_some: ShopShopProductWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
  waNumber: String

  """All values containing the given string."""
  waNumber_contains: String

  """All values ending with the given string."""
  waNumber_ends_with: String

  """All values that are contained in given list."""
  waNumber_in: [String]

  """Any other value that exists and is not equal to the given value."""
  waNumber_not: String

  """All values not containing the given string."""
  waNumber_not_contains: String

  """All values not ending with the given string"""
  waNumber_not_ends_with: String

  """All values that are not contained in given list."""
  waNumber_not_in: [String]

  """All values not starting with the given string."""
  waNumber_not_starts_with: String

  """All values starting with the given string."""
  waNumber_starts_with: String
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input ShopWhereStageInput {
  """Logical AND on all given filters."""
  AND: [ShopWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShopWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [ShopWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: ShopWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Shop record uniquely"""
input ShopWhereUniqueInput {
  id: ID
  slug: String
}

"""Stage system enumeration"""
enum Stage {
  """The Draft is the default stage for all your content."""
  DRAFT

  """The Published stage is where you can publish your content to."""
  PUBLISHED
}

enum SystemDateTimeFieldVariation {
  BASE
  COMBINED
  LOCALIZATION
}

type Tour implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: RichText
  destination(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `destination` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `destination` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
  ): [TourDestination!]!

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Tour!]!
  headerImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `headerImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset

  """List of Tour versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  image(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: AssetOrderByInput
    skip: Int
    where: AssetWhereInput
  ): [Asset!]!
  isFeatured: Boolean
  price(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `price` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ProductPriceOrderByInput
    skip: Int
    where: ProductPriceWhereInput
  ): [ProductPrice!]!
  product(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `product` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
  ): [TourProduct!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!
  shop(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `shop` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `shop` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Shop
  shortDescription: String
  shortLocation: String
  slug: String

  """System stage field"""
  stage: Stage!
  subtitle: String
  title: String

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input TourConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: TourWhereUniqueInput!
}

"""A connection to a list of items."""
type TourConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [TourEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input TourCreateInput {
  createdAt: DateTime
  description: RichTextAST
  destination: TourDestinationCreateManyInlineInput
  headerImage: AssetCreateOneInlineInput
  image: AssetCreateManyInlineInput
  isFeatured: Boolean
  price: ProductPriceCreateManyInlineInput
  product: TourProductCreateManyInlineInput
  shop: ShopCreateOneInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
  updatedAt: DateTime
}

input TourCreateManyInlineInput {
  """Connect multiple existing Tour documents"""
  connect: [TourWhereUniqueInput!]

  """Create and connect multiple existing Tour documents"""
  create: [TourCreateInput!]
}

input TourCreateOneInlineInput {
  """Connect one existing Tour document"""
  connect: TourWhereUniqueInput

  """Create and connect one Tour document"""
  create: TourCreateInput
}

union TourDestination = Destination

input TourDestinationConnectInput {
  Destination: DestinationConnectInput
}

input TourDestinationCreateInput {
  Destination: DestinationCreateInput
}

input TourDestinationCreateManyInlineInput {
  """Connect multiple existing TourDestination documents"""
  connect: [TourDestinationWhereUniqueInput!]

  """Create and connect multiple existing TourDestination documents"""
  create: [TourDestinationCreateInput!]
}

input TourDestinationCreateOneInlineInput {
  """Connect one existing TourDestination document"""
  connect: TourDestinationWhereUniqueInput

  """Create and connect one TourDestination document"""
  create: TourDestinationCreateInput
}

input TourDestinationUpdateInput {
  Destination: DestinationUpdateInput
}

input TourDestinationUpdateManyInlineInput {
  """Connect multiple existing TourDestination documents"""
  connect: [TourDestinationConnectInput!]

  """Create and connect multiple TourDestination documents"""
  create: [TourDestinationCreateInput!]

  """Delete multiple TourDestination documents"""
  delete: [TourDestinationWhereUniqueInput!]

  """Disconnect multiple TourDestination documents"""
  disconnect: [TourDestinationWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing TourDestination documents
  """
  set: [TourDestinationWhereUniqueInput!]

  """Update multiple TourDestination documents"""
  update: [TourDestinationUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple TourDestination documents"""
  upsert: [TourDestinationUpsertWithNestedWhereUniqueInput!]
}

input TourDestinationUpdateManyWithNestedWhereInput {
  Destination: DestinationUpdateManyWithNestedWhereInput
}

input TourDestinationUpdateOneInlineInput {
  """Connect existing TourDestination document"""
  connect: TourDestinationWhereUniqueInput

  """Create and connect one TourDestination document"""
  create: TourDestinationCreateInput

  """Delete currently connected TourDestination document"""
  delete: Boolean

  """Disconnect currently connected TourDestination document"""
  disconnect: Boolean

  """Update single TourDestination document"""
  update: TourDestinationUpdateWithNestedWhereUniqueInput

  """Upsert single TourDestination document"""
  upsert: TourDestinationUpsertWithNestedWhereUniqueInput
}

input TourDestinationUpdateWithNestedWhereUniqueInput {
  Destination: DestinationUpdateWithNestedWhereUniqueInput
}

input TourDestinationUpsertWithNestedWhereUniqueInput {
  Destination: DestinationUpsertWithNestedWhereUniqueInput
}

input TourDestinationWhereInput {
  Destination: DestinationWhereInput
}

input TourDestinationWhereUniqueInput {
  Destination: DestinationWhereUniqueInput
}

"""An edge in a connection."""
type TourEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Tour!
}

"""Identifies documents"""
input TourManyWhereInput {
  """Logical AND on all given filters."""
  AND: [TourWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TourWhereInput!]

  """Logical OR on all given filters."""
  OR: [TourWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput

  """All values in which the union is empty"""
  destination_empty: Boolean

  """
  Matches if the union contains at least one connection to the provided item to the filter
  """
  destination_some: TourDestinationWhereInput
  documentInStages_every: TourWhereStageInput
  documentInStages_none: TourWhereStageInput
  documentInStages_some: TourWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  isFeatured: Boolean

  """Any other value that exists and is not equal to the given value."""
  isFeatured_not: Boolean
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput

  """All values in which the union is empty"""
  product_empty: Boolean

  """
  Matches if the union contains at least one connection to the provided item to the filter
  """
  product_some: TourProductWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shop: ShopWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum TourOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isFeatured_ASC
  isFeatured_DESC
  publishedAt_ASC
  publishedAt_DESC
  shortDescription_ASC
  shortDescription_DESC
  shortLocation_ASC
  shortLocation_DESC
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

union TourProduct = Product

input TourProductConnectInput {
  Product: ProductConnectInput
}

input TourProductCreateInput {
  Product: ProductCreateInput
}

input TourProductCreateManyInlineInput {
  """Connect multiple existing TourProduct documents"""
  connect: [TourProductWhereUniqueInput!]

  """Create and connect multiple existing TourProduct documents"""
  create: [TourProductCreateInput!]
}

input TourProductCreateOneInlineInput {
  """Connect one existing TourProduct document"""
  connect: TourProductWhereUniqueInput

  """Create and connect one TourProduct document"""
  create: TourProductCreateInput
}

input TourProductUpdateInput {
  Product: ProductUpdateInput
}

input TourProductUpdateManyInlineInput {
  """Connect multiple existing TourProduct documents"""
  connect: [TourProductConnectInput!]

  """Create and connect multiple TourProduct documents"""
  create: [TourProductCreateInput!]

  """Delete multiple TourProduct documents"""
  delete: [TourProductWhereUniqueInput!]

  """Disconnect multiple TourProduct documents"""
  disconnect: [TourProductWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing TourProduct documents
  """
  set: [TourProductWhereUniqueInput!]

  """Update multiple TourProduct documents"""
  update: [TourProductUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple TourProduct documents"""
  upsert: [TourProductUpsertWithNestedWhereUniqueInput!]
}

input TourProductUpdateManyWithNestedWhereInput {
  Product: ProductUpdateManyWithNestedWhereInput
}

input TourProductUpdateOneInlineInput {
  """Connect existing TourProduct document"""
  connect: TourProductWhereUniqueInput

  """Create and connect one TourProduct document"""
  create: TourProductCreateInput

  """Delete currently connected TourProduct document"""
  delete: Boolean

  """Disconnect currently connected TourProduct document"""
  disconnect: Boolean

  """Update single TourProduct document"""
  update: TourProductUpdateWithNestedWhereUniqueInput

  """Upsert single TourProduct document"""
  upsert: TourProductUpsertWithNestedWhereUniqueInput
}

input TourProductUpdateWithNestedWhereUniqueInput {
  Product: ProductUpdateWithNestedWhereUniqueInput
}

input TourProductUpsertWithNestedWhereUniqueInput {
  Product: ProductUpsertWithNestedWhereUniqueInput
}

input TourProductWhereInput {
  Product: ProductWhereInput
}

input TourProductWhereUniqueInput {
  Product: ProductWhereUniqueInput
}

input TourUpdateInput {
  description: RichTextAST
  destination: TourDestinationUpdateManyInlineInput
  headerImage: AssetUpdateOneInlineInput
  image: AssetUpdateManyInlineInput
  isFeatured: Boolean
  price: ProductPriceUpdateManyInlineInput
  product: TourProductUpdateManyInlineInput
  shop: ShopUpdateOneInlineInput
  shortDescription: String
  shortLocation: String
  slug: String
  subtitle: String
  title: String
}

input TourUpdateManyInlineInput {
  """Connect multiple existing Tour documents"""
  connect: [TourConnectInput!]

  """Create and connect multiple Tour documents"""
  create: [TourCreateInput!]

  """Delete multiple Tour documents"""
  delete: [TourWhereUniqueInput!]

  """Disconnect multiple Tour documents"""
  disconnect: [TourWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Tour documents
  """
  set: [TourWhereUniqueInput!]

  """Update multiple Tour documents"""
  update: [TourUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Tour documents"""
  upsert: [TourUpsertWithNestedWhereUniqueInput!]
}

input TourUpdateManyInput {
  description: RichTextAST
  isFeatured: Boolean
  shortDescription: String
  shortLocation: String
  subtitle: String
  title: String
}

input TourUpdateManyWithNestedWhereInput {
  """Update many input"""
  data: TourUpdateManyInput!

  """Document search"""
  where: TourWhereInput!
}

input TourUpdateOneInlineInput {
  """Connect existing Tour document"""
  connect: TourWhereUniqueInput

  """Create and connect one Tour document"""
  create: TourCreateInput

  """Delete currently connected Tour document"""
  delete: Boolean

  """Disconnect currently connected Tour document"""
  disconnect: Boolean

  """Update single Tour document"""
  update: TourUpdateWithNestedWhereUniqueInput

  """Upsert single Tour document"""
  upsert: TourUpsertWithNestedWhereUniqueInput
}

input TourUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: TourUpdateInput!

  """Unique document search"""
  where: TourWhereUniqueInput!
}

input TourUpsertInput {
  """Create document if it didn't exist"""
  create: TourCreateInput!

  """Update document if it exists"""
  update: TourUpdateInput!
}

input TourUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: TourUpsertInput!

  """Unique document search"""
  where: TourWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input TourWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input TourWhereInput {
  """Logical AND on all given filters."""
  AND: [TourWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TourWhereInput!]

  """Logical OR on all given filters."""
  OR: [TourWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput

  """All values in which the union is empty"""
  destination_empty: Boolean

  """
  Matches if the union contains at least one connection to the provided item to the filter
  """
  destination_some: TourDestinationWhereInput
  documentInStages_every: TourWhereStageInput
  documentInStages_none: TourWhereStageInput
  documentInStages_some: TourWhereStageInput
  headerImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image_every: AssetWhereInput
  image_none: AssetWhereInput
  image_some: AssetWhereInput
  isFeatured: Boolean

  """Any other value that exists and is not equal to the given value."""
  isFeatured_not: Boolean
  price_every: ProductPriceWhereInput
  price_none: ProductPriceWhereInput
  price_some: ProductPriceWhereInput

  """All values in which the union is empty"""
  product_empty: Boolean

  """
  Matches if the union contains at least one connection to the provided item to the filter
  """
  product_some: TourProductWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  shop: ShopWhereInput
  shortDescription: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values that are contained in given list."""
  shortDescription_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortDescription_not: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values not ending with the given string"""
  shortDescription_not_ends_with: String

  """All values that are not contained in given list."""
  shortDescription_not_in: [String]

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values starting with the given string."""
  shortDescription_starts_with: String
  shortLocation: String

  """All values containing the given string."""
  shortLocation_contains: String

  """All values ending with the given string."""
  shortLocation_ends_with: String

  """All values that are contained in given list."""
  shortLocation_in: [String]

  """Any other value that exists and is not equal to the given value."""
  shortLocation_not: String

  """All values not containing the given string."""
  shortLocation_not_contains: String

  """All values not ending with the given string"""
  shortLocation_not_ends_with: String

  """All values that are not contained in given list."""
  shortLocation_not_in: [String]

  """All values not starting with the given string."""
  shortLocation_not_starts_with: String

  """All values starting with the given string."""
  shortLocation_starts_with: String
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  subtitle: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  subtitle_not: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values starting with the given string."""
  subtitle_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input TourWhereStageInput {
  """Logical AND on all given filters."""
  AND: [TourWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TourWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [TourWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: TourWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Tour record uniquely"""
input TourWhereUniqueInput {
  id: ID
  slug: String
}

input UnpublishLocaleInput {
  """Locales to unpublish"""
  locale: Locale!

  """Stages to unpublish selected locales from"""
  stages: [Stage!]!
}

"""User system model"""
type User implements Entity & Node {
  """The time the document was created"""
  createdAt: DateTime!

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [User!]!

  """The unique identifier"""
  id: ID!

  """Flag to determine if user is active or not"""
  isActive: Boolean!

  """User Kind. Can be either MEMBER, PAT or PUBLIC"""
  kind: UserKind!

  """The username"""
  name: String!

  """Profile Picture url"""
  picture: String

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt: DateTime!
}

input UserConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: UserWhereUniqueInput!
}

"""A connection to a list of items."""
type UserConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [UserEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input UserCreateManyInlineInput {
  """Connect multiple existing User documents"""
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInlineInput {
  """Connect one existing User document"""
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}

"""System User Kind"""
enum UserKind {
  APP_TOKEN
  MEMBER
  PAT
  PUBLIC
  WEBHOOK
}

"""Identifies documents"""
input UserManyWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  documentInStages_every: UserWhereStageInput
  documentInStages_none: UserWhereStageInput
  documentInStages_some: UserWhereStageInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isActive: Boolean

  """Any other value that exists and is not equal to the given value."""
  isActive_not: Boolean
  kind: UserKind

  """All values that are contained in given list."""
  kind_in: [UserKind]

  """Any other value that exists and is not equal to the given value."""
  kind_not: UserKind

  """All values that are not contained in given list."""
  kind_not_in: [UserKind]
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
  picture: String

  """All values containing the given string."""
  picture_contains: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values that are contained in given list."""
  picture_in: [String]

  """Any other value that exists and is not equal to the given value."""
  picture_not: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values not ending with the given string"""
  picture_not_ends_with: String

  """All values that are not contained in given list."""
  picture_not_in: [String]

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values starting with the given string."""
  picture_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isActive_ASC
  isActive_DESC
  kind_ASC
  kind_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateManyInlineInput {
  """Connect multiple existing User documents"""
  connect: [UserConnectInput!]

  """Disconnect multiple User documents"""
  disconnect: [UserWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing User documents
  """
  set: [UserWhereUniqueInput!]
}

input UserUpdateOneInlineInput {
  """Connect existing User document"""
  connect: UserWhereUniqueInput

  """Disconnect currently connected User document"""
  disconnect: Boolean
}

"""
This contains a set of filters that can be used to compare values internally
"""
input UserWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  documentInStages_every: UserWhereStageInput
  documentInStages_none: UserWhereStageInput
  documentInStages_some: UserWhereStageInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isActive: Boolean

  """Any other value that exists and is not equal to the given value."""
  isActive_not: Boolean
  kind: UserKind

  """All values that are contained in given list."""
  kind_in: [UserKind]

  """Any other value that exists and is not equal to the given value."""
  kind_not: UserKind

  """All values that are not contained in given list."""
  kind_not_in: [UserKind]
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
  picture: String

  """All values containing the given string."""
  picture_contains: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values that are contained in given list."""
  picture_in: [String]

  """Any other value that exists and is not equal to the given value."""
  picture_not: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values not ending with the given string"""
  picture_not_ends_with: String

  """All values that are not contained in given list."""
  picture_not_in: [String]

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values starting with the given string."""
  picture_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input UserWhereStageInput {
  """Logical AND on all given filters."""
  AND: [UserWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: UserWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References User record uniquely"""
input UserWhereUniqueInput {
  id: ID
}

type Version {
  createdAt: DateTime!
  id: ID!
  revision: Int!
  stage: Stage!
}

input VersionWhereInput {
  id: ID!
  revision: Int!
  stage: Stage!
}

enum _FilterKind {
  AND
  NOT
  OR
  contains
  contains_all
  contains_none
  contains_some
  ends_with
  eq
  eq_not
  gt
  gte
  in
  json_path_exists
  json_value_recursive
  lt
  lte
  not_contains
  not_ends_with
  not_in
  not_starts_with
  relational_every
  relational_none
  relational_single
  relational_some
  search
  starts_with
  union_empty
  union_every
  union_none
  union_single
  union_some
}

enum _MutationInputFieldKind {
  enum
  relation
  richText
  richTextWithEmbeds
  scalar
  union
  virtual
}

enum _MutationKind {
  create
  delete
  deleteMany
  publish
  publishMany
  schedulePublish
  scheduleUnpublish
  unpublish
  unpublishMany
  update
  updateMany
  upsert
}

enum _OrderDirection {
  asc
  desc
}

enum _RelationInputCardinality {
  many
  one
}

enum _RelationInputKind {
  create
  update
}

enum _RelationKind {
  regular
  union
}

enum _SystemDateTimeFieldVariation {
  base
  combined
  localization
}
